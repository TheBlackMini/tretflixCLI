# avoid double inclusion
if test "${shares__imported+defined}" == "defined"; then
  return 0
fi
shares__imported=1

function shares__help() {
  echo "Usage: tretflix shares [COMMAND] [INPUT] [OPTION]"
  echo
  echo "COMMANDS:"
  echo "  tretflix shares add cifs [HOST] [SHARE] [OPTION] ..."
  echo "  tretflix shares del cifs [HOST] [SHARE]"
  echo "  tretflix shares add nfs [HOST] [SHARE]"
  echo "  tretflix shares del nfs [HOST] [SHARE]"
  echo "  tretflix shares mount all"
  echo "  tretflix shares show config"
  echo
  echo "OPTIONS:"
  echo "  -u, --user [USERNAME] [PASSWORD]"
  echo
  exit 1
}

function shares__command_handler() {
  if test "${CLI_ARGS[2]+isset}"; then
    case "${CLI_ARGS[1]} ${CLI_ARGS[2]}" in
    	'add cifs')
    	  shares__add_share
    	  ;;
    	'del cifs')
    	  shares__del_share
    	  ;;
    	'add nfs')
    	  shares__add_share
    	  ;;
    	'del nfs')
    	  shares__del_share
    	  ;;
    	'mount all')
    	  shares__mount_all
    	  ;;    	  
      'show config')
        shares__show_config
        ;;
      *)
        shares__help
    esac
  else
    shares__help
  fi
}

function shares__add_share() {
  if [ "${#CLI_ARGS[@]}" -eq 5 ]; then
    # Assign the user/pass variables for guest cifs shares
    user="guest"
    pass=""
  elif [ "${#CLI_ARGS[@]}" -eq 8 ]; then
    case "${CLI_ARGS[5]}" in
      '-u' | '--user')
        # Assign the user/pass variables for authenticated cifs shares
        user="${CLI_ARGS[6]}"
        pass="${CLI_ARGS[7]}"
        ;;
      *)
        shares__help
    esac
  else
    shares__help
  fi

  # Assign friendly names to passed variables
  host="${CLI_ARGS[3]}"
  share="${CLI_ARGS[4]}"
  type="${CLI_ARGS[2]}"

  # Validate the share before adding and mounting
  shares__validate_share "$host" "$share" "$type" "$user" "$pass"

  # Build the share and mount point syntax depending on share type
  if [ "$type" == "cifs" ]; then
    shareStr="//${CLI_ARGS[3]}/${CLI_ARGS[4]}"
    mountPointStr="/mnt/${CLI_ARGS[3]}/${CLI_ARGS[4]}"
    optionStr="auto,sec=ntlm,uid=$osUser,gid=$osUser,username=$user,password=$pass"
  elif [ "$type" == "nfs" ]; then
    shareStr="${CLI_ARGS[3]}:${CLI_ARGS[4]}"
    mountPointStr="/mnt/${CLI_ARGS[3]}${CLI_ARGS[4]}"
    optionStr="auto"
  else
    echo "Invalid share type"
    echo
    exit 1
  fi
  
  # Create the mount point, display error and exit if operation fails
  mkdir -p $mountPointStr
  if [ $? -ne 0 ]; then
    echo "Failed to create the mount point '$mountPointStr'"
    echo
    exit 1
  fi
  
  # Write the mount details to fstab
  echo "Applying changes to fstab..."
  sudo su -c "echo -e '$shareStr $mountPointStr $type $optionStr 0 0' >> /etc/fstab"
    
  # Mount the share, display error and exit if operation fails
  echo "Mounting share..."
  sudo mount $mountPoint > /dev/null 2>&1
  if [ $? -ne 0 ]; then
    echo "Failed to mount the share '$share'"
    echo
    exit 1
  fi
  
  echo "Done."
}

function shares__del_share() {
  if [ "${#CLI_ARGS[@]}" -eq 5 ]; then
    # Assign friendly names to passed variables
    host="${CLI_ARGS[3]}"
    share="${CLI_ARGS[4]}"
    type="${CLI_ARGS[2]}"
    
    # Build the share and mount point syntax depending on share type
    if [ "$type" == "cifs" ]; then
      shareStr="//${CLI_ARGS[3]}/${CLI_ARGS[4]}"
      mountPointStr="/mnt/${CLI_ARGS[3]}/${CLI_ARGS[4]}"
    elif [ "$type" == "nfs" ]; then
      shareStr="${CLI_ARGS[3]}:${CLI_ARGS[4]}"
      mountPointStr="/mnt/${CLI_ARGS[3]}${CLI_ARGS[4]}"
    else
      echo "Invalid share type"
      echo
      exit 1
    fi
    
    # Exit if the share isn't found in /etc/fstab
    if ! cat /etc/fstab | grep -q "^$shareStr $mountPointStr $type"; then
      echo "Share not found in fstab"
      echo
      exit 1
    fi
    
    # Unmount the share if currently mounted, display error if unmount fails
    if df -T | grep -q "^$shareStr.*$type.*$mountPointStr$"; then
      echo "Unmounting share..."
      sudo umount $mountPointStr > /dev/null 2>&1
      if [ $? -ne 0 ]; then
        echo "Unmount failed, unable to remove the share"
        echo
        exit 1
      fi
    fi

    # Remove the share entry from /etc/fstab
    echo "Applying changes to fstab..."
    sudo sed -i '\#^'"$shareStr"' '"$mountPointStr"' '"$type"'#d' /etc/fstab

		# Share removal verification, display error if the share was not successfully removed
    if cat /etc/fstab | grep -q "^$shareStr $mountPointStr $type"; then
      echo "Failed to remove the NFS share entry from /etc/fstab"
      echo
      exit 1
    fi
    
    echo "Done."
  else
    shares__help
  fi
}

function shares__mount_all() {
  if [ "${#CLI_ARGS[@]}" -eq 3 ]; then
    mount -a
    shares__show_config
  else
    shares__help
  fi
}    

function shares__show_config() {
  if [ "${#CLI_ARGS[@]}" -eq 3 ]; then
    # If cifs/nfs shares are found in fstab, display the df headers
    if egrep -i -q "cifs|nfs" /etc/fstab; then
      df -hT | head -1
      # Loop through the cifs/nfs shares in fstab
      egrep -i "cifs|nfs" /etc/fstab | while read -r line; do
        share=$(echo $line | awk '{print $1}')
        # If the current share from fstab is mounted, display the df -hT output
        if df -hT | grep -q "$share"; then
          df -hT | grep "$share"
        # If the current share from fstab is nout mounted, display the share syntax + (Not Mounted)
        else
          echo -e "$share \t (Not Mounted)"
        fi
      done  
    else
      echo "No shares have been added"
    fi
  else
    shares__help
  fi
}

function shares__validate_share() {
  # Assign friendly names to passed variables
  host="$1"
  share="$2"
  type="$3"
  user="$4"
  pass="$5"
  
  # Build the share and mount point syntax depending on share type
  if [ "$type" == "cifs" ]; then
    shareStr="//${CLI_ARGS[3]}/${CLI_ARGS[4]}"
    mountPointStr="/mnt/${CLI_ARGS[3]}/${CLI_ARGS[4]}"
  elif [ "$type" == "nfs" ]; then
    shareStr="${CLI_ARGS[3]}:${CLI_ARGS[4]}"
    mountPointStr="/mnt/${CLI_ARGS[3]}${CLI_ARGS[4]}"
  else
    echo "Invalid share type"
    echo
    exit 1
  fi
  
  # Define the test mount point path
  testMountPoint="/mnt/.test"

  # Verify that the host is reachable and/or hostname can be resolved
  tools__host_ping "$host"
  
  # Verify that the share and/or mount point isn't already in use
  if cat /etc/fstab | grep -q "^$shareStr.*$type"; then
    echo "The share '$shareStr' is already in fstab"
    echo
    exit 1
  elif cat /etc/fstab | grep -q " $mountPointStr "; then
    echo "The mount point '$mountPointStr' is already in fstab"
    echo
    exit 1
  fi

  # Validate that the mount point is usable if it already exists
  if tools__path_exists "$mountPointStr"; then
    if [ "$(tools__path_istype $mountPointStr)" != "Directory" ]; then
      echo "The moint point '$mountPointStr' is a file and cannot be used"
      echo
      exit 1
    elif ! tools__dir_isempty "$mountPointStr"; then
      echo "The mount point '$mountPointStr' is not empty and cannot be used"
      echo
      exit 1
    fi
  fi
  
  # If the test mountpoint is already in use, unmount it
  if df -T | grep -q "$testMountPoint$"; then
    umount $testMountPoint > /dev/null 2>&1
    if [ $? -ne 0 ]; then
      echo "The test mount point is in use and could not be unmounted."
      echo
      exit 1
    fi
  fi

  # Mount the share to the test mount point
  if [ "$type" == "cifs" ]; then
    share="//$host/$share"
    output=$(mount -t cifs $share $testMountPoint -o sec=ntlm,user=$user,pass=$pass 2>&1)
  elif [ "$type" == "nfs" ]; then
    share="$host:$share"
    output=$(mount -t nfs $share $testMountPoint 2>&1)
  fi
  
  # If test mount was successful, unmount
  if [ $? -eq 0 ]; then
    umount $testMountPoint > /dev/null 2>&1
  else
    # If test mount was unsuccessful, display the reason
    if echo $output | grep -q "Retrying with upper case share name.*No such device or address"; then
      echo "No such share found on the host"
    elif echo $output | grep -q "mount error.*Permission denied"; then
      echo "Access denied, a valid login/password is required"
    elif echo $output | grep -q "access denied by server while mounting"; then
      echo "Access denied, share access is restricted or no such share found on the host"
    else
      echo "$output"
    fi
    echo
    exit 1
  fi
}