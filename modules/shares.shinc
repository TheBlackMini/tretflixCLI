# avoid double inclusion
if test "${shares__imported+defined}" == "defined"; then
  return 0
fi
shares__imported=1

function shares__help() {
  echo "Usage: tretflix shares [COMMAND] [INPUT] [OPTION]"
  echo
  echo "COMMANDS:"
  echo "  tretflix shares add [TYPE] [HOST] [SHARE] [OPTION] ..."
  echo "  tretflix shares del [TYPE] [HOST] [SHARE]"
  echo "  tretflix shares mount all"
  echo "  tretflix shares show config"
  echo
  echo "TYPES: CIFS, NFS"
  echo
  echo "OPTIONS:"
  echo "  -u, --user [USERNAME] [PASSWORD]"
  echo
  echo "NOTES:"
  echo "  Use the 'mount all' option in the event that one or more" 
  echo "  shares fail to mount on startup or become unmounted. If"
  echo "  mount attempts repeatedly fail, delete and re-add the"
  echo "  shares as needed."
	echo
  exit 1
}

function shares__command_handler() {
  if test "${CLI_ARGS[2]+isset}"; then
    case "${CLI_ARGS[1]} ${CLI_ARGS[2]}" in
    	'add cifs'|'add nfs')
				if [ "${#CLI_ARGS[@]}" -eq 5 ]; then
					shares__add_share "${CLI_ARGS[2]}" "${CLI_ARGS[3]}" "${CLI_ARGS[4]}" "guest" ""
				elif [ "${#CLI_ARGS[@]}" -eq 8 ]; then
					case "${CLI_ARGS[5]}" in
						'-u' | '--user')
							shares__add_share "${CLI_ARGS[2]}" "${CLI_ARGS[3]}" "${CLI_ARGS[4]}" "${CLI_ARGS[6]}" "${CLI_ARGS[7]}"
							;;
						*)
							shares__help
					esac
				else
					shares__help
				fi
    	  ;;
    	'del cifs'|'del nfs')
				if [ "${#CLI_ARGS[@]}" -eq 5 ]; then
					shares__del_share "${CLI_ARGS[2]}" "${CLI_ARGS[3]}" "${CLI_ARGS[4]}"
				else
					shares__help
				fi
    	  ;;
    	'mount all')
				if [ "${#CLI_ARGS[@]}" -eq 3 ]; then
					shares__mount_all
				else
					shares__help
				fi     
    	  ;;    	  
      'show config')
        if [ "${#CLI_ARGS[@]}" -eq 3 ]; then
          shares__show_config
				else
					shares__help
				fi          
        ;;
      *)
        shares__help
    esac
  else
    shares__help
  fi
}

function shares__add_share() {
  type="$1"
  host="$2"
  share="$3"
  user="$4"
  pass="$5"

  # Make sure the 'type' string is lowercase (in case the user entered it otherwise)
  type=$(echo "$type" | tr '[:upper:]' '[:lower:]')

  # Build the share and mount point syntax depending on share type
  if [ "$type" == "cifs" ]; then
    shareStr="//$host/$share"
    mountPointStr="/mnt/$host/$share"
    optionStr="auto,sec=ntlm,uid=$osUser,gid=$osUser,username=$user,password=$pass"
    optionAlt="auto,nounix,sec=ntlmssp,uid=$osUser,gid=$osUser,username=$user,password=$pass"
  elif [ "$type" == "nfs" ]; then
    shareStr="$host:$share"
    mountPointStr="/mnt/$host$share"
    optionStr="auto"
    optionAlt="auto"
  else
    echo "Invalid share type"
    echo
    exit 1
  fi
  
  # Validate the mount point before testing
  shares__validate_mountpoint "$mountPointStr"
  
  # Validate the share before adding and mounting
  shares__validate_share "$type" "$host" "$shareStr" "$optionStr" "$optionAlt"
  
  # Create the mount point, display error and exit if operation fails
  mkdir -p $mountPointStr > /dev/null 2>&1
  if [ $? -ne 0 ]; then
    echo "Failed to create the mount point '$mountPointStr'"
    echo
    exit 1
  fi
  
  # Write the mount line to fstab
  echo "Applying changes to fstab..."
  sudo su -c "echo -e '$shareStr $mountPointStr $type $optionStr 0 0' >> /etc/fstab"
    
  # Mount the share, display error and exit if operation fails
  echo "Mounting share..."
  sudo mount $mountPointStr > /dev/null 2>&1
  if [ $? -ne 0 ]; then
    echo "Failed to mount the share '$share'"
    echo
    exit 1
  fi
  
  echo
  shares__show_config
}

function shares__del_share() {
  type="$1"
  host="$2"
  share="$3"
  
  # Make sure the 'type' string is lowercase (in case the user entered it otherwise)
  type=$(echo "$type" | tr '[:upper:]' '[:lower:]')
  
    
	# Build the share and mount point syntax depending on share type
	if [ "$type" == "cifs" ]; then
		shareStr="//$host/$share"
		mountPointStr="/mnt/$host/$share"
	elif [ "$type" == "nfs" ]; then
		shareStr="$host:$share"
		mountPointStr="/mnt/$host$share"
	else
		echo "Invalid share type"
		echo
		exit 1
	fi
	
	# Exit if the share isn't found in /etc/fstab
	if ! cat /etc/fstab | grep -q "^$shareStr $mountPointStr $type"; then
		echo "Share not found in fstab"
		echo
		exit 1
	fi
	
	# Unmount the share if currently mounted, display error if unmount fails
	if df -T | grep -q "^$shareStr.*$type.*$mountPointStr$"; then
		echo "Unmounting share..."
		sudo umount $mountPointStr > /dev/null 2>&1
		if [ $? -ne 0 ]; then
			echo "Unmount failed, unable to remove the share"
			echo
			exit 1
		fi
	fi

	# Remove the share entry from /etc/fstab
	echo "Applying changes to fstab..."
	sudo sed -i '\#^'"$shareStr"' '"$mountPointStr"' '"$type"'#d' /etc/fstab

	# Share removal verification, display error if the share was not successfully removed
	if cat /etc/fstab | grep -q "^$shareStr $mountPointStr $type"; then
		echo "Failed to remove the share from fstab"
		echo
		exit 1
	fi
  
  echo
  shares__show_config
}

function shares__mount_all() {
  mount -a > /dev/null 2>&1
  shares__show_config
}    

function shares__show_config() {
	# If cifs/nfs shares are found in fstab, display the df headers
	if egrep -i -q "cifs|nfs" /etc/fstab; then
		df -hT | head -1
		# Loop through the cifs/nfs shares in fstab
		egrep -i "cifs|nfs" /etc/fstab | while read -r line; do
			share=$(echo $line | awk '{print $1}')
			# If the current share from fstab is mounted, display the df -hT output
			if df -hT | grep -q "$share"; then
				df -hT | grep "$share"
			# If the current share from fstab is nout mounted, display the share syntax + (Not Mounted)
			else
				echo -e "$share \t (Not Mounted)"
			fi
		done  
	else
		echo "No shares are mounted"
	fi
}

function shares__validate_mountpoint() {
  # Verify that the mount point isn't already configured in fstab
  if cat /etc/fstab | grep -q " $mountPointStr "; then
    echo "The mount point '$mountPointStr' is already configured in fstab"
    echo
    exit 1
  fi
  
  # If the mount point path exists, validate it's usability
  if tools__path_exists "$mountPointStr"; then
    if [ "$(tools__path_istype $mountPointStr)" != "Directory" ]; then
      echo "The moint point '$mountPointStr' is a file and cannot be used"
      echo
      exit 1
    elif ! tools__dir_isempty "$mountPointStr"; then
      echo "The mount point '$mountPointStr' is not empty and cannot be used"
      echo
      exit 1
    fi
  fi
}

function shares__validate_share() {
  # Assign friendly names to passed variables
  type="$1"
  host="$2"
  shareStr="$3"
  optionStr="$4"
  optionAlt="$5"
  
  # Verify that the host is reachable and/or hostname can be resolved
  tools__host_ping "$host"

  # Verify that the share isn't already configured in fstab
  if cat /etc/fstab | grep -q "^$shareStr.*$type"; then
    echo "The share '$shareStr' is already configured in fstab"
    echo
    exit 1
  fi
  
  # If the test mount point doesn't exist, create it
  if [ ! -d "$testMountPoint" ]; then
    mkdir "$testMountPoint"
  fi

  # If the test mount point is already in use, unmount it
  if df -T | grep -q "$testMountPoint$"; then
    umount "$testMountPoint" > /dev/null 2>&1
    if [ $? -ne 0 ]; then
      echo "The test mount point is in use and could not be unmounted"
      echo
      exit 1
    fi
  fi 
  
  # Mount the share to the test mount point
  output=$(mount -t "$type" "$shareStr" "$testMountPoint" -o "$optionStr" 2>&1)
  if [ $? -eq 0 ]; then
    umount "$testMountPoint" > /dev/null 2>&1
  else
    output=$(mount -t "$type" "$shareStr" "$testMountPoint" -o "$optionAlt" 2>&1)
    if [ $? -eq 0 ]; then
      umount "$testMountPoint" > /dev/null 2>&1
      optionStr="$optionAlt"
		else
			# If test mount was unsuccessful, display the reason
			if echo "$output" | grep -q "mount error(6): No such device or address"; then
				echo "Share not found on the host"
			elif echo "$output" | grep -q "mount error.*Permission denied"; then
				echo "Access denied, a valid login/password is required"
			elif echo "$output" | grep -q "access denied by server while mounting"; then
				echo "Access denied, share access is restricted or share not found on the host"
			else
				echo "$output"
			fi
			echo
			exit 1
		fi 
  fi
}