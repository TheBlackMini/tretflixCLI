# avoid double inclusion
if test "${scheduler__imported+defined}" == "defined"; then
  return 0
fi
scheduler__imported=1

function scheduler__help() {
  echo "Usage: tretflix scheduler [OPTION] [COMMAND]"
  echo
  echo "COMMANDS:"
  echo "  tretflix scheduler [OPTION] enable"
  echo "  tretflix scheduler [OPTION] disable"
  echo "  tretflix scheduler [OPTION] show config"
  echo
  echo "OPTIONS:"
  echo "  -a, --all"
  echo "  -c, --cleanup"
  echo "  -u, --upgrades"
  echo
  echo "NOTES:"
  echo "  Enable 'cleanup' to to automatically purge abandoned tmp"
  echo "  files/dirs daily at 1am. Enable 'upgrades' to automatically"
  echo "  upgrade all services/apps daily at 2am."
  echo
  exit 1
}

function scheduler__command_handler() {
  if test "${CLI_ARGS[3]+isset}"; then
    case "${CLI_ARGS[2]} ${CLI_ARGS[3]}" in
      'show config')
        if [ "${#CLI_ARGS[@]}" -eq 4 ]; then
          scheduler__show_config "${CLI_ARGS[1]}"
        else
          scheduler__help
        fi
        ;;			
      *)
        scheduler__help
    esac
  elif test "${CLI_ARGS[2]+isset}"; then
    case "${CLI_ARGS[2]}" in
      enable)
        if [ "${#CLI_ARGS[@]}" -eq 3 ]; then
          scheduler__enable "${CLI_ARGS[1]}"
        else
          scheduler__help
        fi
        ;;
      disable)
        if [ "${#CLI_ARGS[@]}" -eq 3 ]; then
          scheduler__disable "${CLI_ARGS[1]}"
        else
          scheduler__help
        fi
        ;;			
      *)
        scheduler__help
    esac
  else
    scheduler__help
  fi
}

function scheduler__enable() {
  option="$1"

	case "$option" in
		'-a' | '--all')
			scheduler__cleanup "enable"
			scheduler__upgrades "enable"
			
			echo
			scheduler__cleanup "show config"
			scheduler__upgrades "show config"
			;;
		'-c' | '--cleanup')
			scheduler__cleanup "enable"
			
			echo
			scheduler__cleanup "show config"
			;;
		'-u' | '--upgrades')
			scheduler__upgrades "enable"
			
			echo
			scheduler__upgrades "show config"
			;;
		*)
			scheduler__help
	esac
}

function scheduler__disable() {
  option="$1"

	case "$option" in
		'-a' | '--all')
			scheduler__cleanup "disable"
			scheduler__upgrades "disable"

			echo
			scheduler__cleanup "show config"
			scheduler__upgrades "show config"
			;;
		'-c' | '--cleanup')
			scheduler__cleanup "disable"
			
			echo
			scheduler__cleanup "show config"
			;;
		'-u' | '--upgrades')
			scheduler__upgrades "disable"
			
			echo
			scheduler__upgrades "show config"
			;;
		*)
			scheduler__help
	esac
}

function scheduler__show_config() {
  option="$1"

	case "$option" in
		'-a' | '--all')
			scheduler__cleanup "show config"
			scheduler__upgrades "show config"
			;;
		'-c' | '--cleanup')
			scheduler__cleanup "show config"
			;;
		'-u' | '--upgrades')
			scheduler__upgrades "show config"
			;;
		*)
			scheduler__help
	esac
}

function scheduler__cleanup() {
  option="$1"
  tmpfile="/tmp/cron.tmp"
  
  # If the user option is "enable" and the cronjob isn't present, add it
  if [ "$option" == "enable" ]; then
    if ! sudo su -c -u $osUser "crontab -l" 2> /dev/null | grep -q "storage tmp cleanup"; then
      echo "* Enabling automatic tmp cleanup"

      # Output the current crontab to a tmp file
      sudo su -c -u $osUser \
        "crontab -l > $tmpfile 2> /dev/null"

      sudo su -c -u $osUser \
        "echo '0 1 * * * /opt/tretflix/.sys/cli/./tretflixCLI.sh storage tmp cleanup' >> $tmpfile"
        
      sudo su -c -u $osUser \
        "crontab $tmpfile"
    else
      echo "Automatic tmp cleanup is already enabled"
    fi

  # If the user option is "disable" and the cronjob is present, remove it
  elif [ "$option" == "disable" ]; then
    if sudo su -c -u $osUser "crontab -l" 2> /dev/null | grep -q "storage tmp cleanup"; then
      echo "* Disabling automatic tmp cleanup"
      
      # Output the current crontab to a tmp file
      sudo su -c -u $osUser \
        "crontab -l > $tmpfile 2> /dev/null"
      
      sed -i '/tretflixCLI.sh storage tmp cleanup/d' $tmpfile
      
      sudo su -c -u $osUser \
        "crontab $tmpfile"
    else
      echo "Automatic tmp cleanup is already disabled"
    fi

  elif [ "$option" == "show config" ]; then
		if sudo su -c -u $osUser "crontab -l" 2> /dev/null | grep -q "storage tmp cleanup"; then
			echo "Cleanup: Scheduled to run daily at 1am"
		else
			echo "Cleanup: Not scheduled"
		fi  
  fi

  rm -f $tmpfile > /dev/null 2>&1
}

function scheduler__upgrades() {
  option="$1"
  tmpfile="/tmp/cron.tmp"
  
  # If the user option is "enable" and the cronjob isn't present, add it
  if [ "$option" == "enable" ]; then
    if ! sudo su -c -u $osUser "crontab -l" 2> /dev/null | grep -q "service -a upgrade"; then
      echo "* Enabling automatic app upgrades"

      # Output the current crontab to a tmp file
      sudo su -c -u $osUser \
        "crontab -l > $tmpfile 2> /dev/null"

      sudo su -c -u $osUser \
        "echo '0 2 * * * /opt/tretflix/.sys/cli/./tretflixCLI.sh service -a upgrade' >> $tmpfile"
        
      sudo su -c -u $osUser \
        "crontab $tmpfile"
    else
      echo "Automatic app upgrades are already enabled"
    fi

  # If the user option is "disable" and the cronjob is present, remove it
  elif [ "$option" == "disable" ]; then
    if sudo su -c -u $osUser "crontab -l" 2> /dev/null | grep -q "service -a upgrade"; then
      echo "* Disabling automatic app upgrades"
      
      # Output the current crontab to a tmp file
      sudo su -c -u $osUser \
        "crontab -l > $tmpfile 2> /dev/null"
      
      sed -i '/tretflixCLI.sh service -a upgrade/d' $tmpfile
      
      sudo su -c -u $osUser \
        "crontab $tmpfile"
    else
      echo "Automatic app upgrades are already disabled"
    fi

  elif [ "$option" == "show config" ]; then
		if sudo su -c -u $osUser "crontab -l" 2> /dev/null | grep -q "service -a upgrade"; then
			echo "Upgrades: Scheduled to run daily at 2am"
		else
			echo "Upgrades: Not scheduled"
		fi
  fi
  
  rm -f $tmpfile > /dev/null 2>&1
}

