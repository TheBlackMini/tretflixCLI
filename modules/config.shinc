# avoid double inclusion
if test "${config__imported+defined}" == "defined"; then
  return 0
fi
config__imported=1

function config__help() {
  echo "Usage: tretflix config [COMMAND] [OPTION]"
  echo
  echo "COMMANDS:"
  echo "  tretflix config wizard"
  echo "  tretflix config backup appdata"
  echo "  tretflix config restore appdata [OPTION] ..."
  echo
  echo "OPTIONS:"
  echo "  -l, --list"
  echo "  -f, --file [FILE]"
  echo
  echo "NOTES:" 
  echo "  Backups will be saved in /opt/tretflix. When restoring a" 
  echo "  backup, provide the backup filename or the full path to"
  echo "  the backup file if it's not in /opt/tretflix."
  echo
  exit 1
}

function config__command_handler() {
  if test "${CLI_ARGS[2]+isset}"; then
    case "${CLI_ARGS[1]} ${CLI_ARGS[2]}" in
      'backup appdata')
        config__backup_appdata
        ;;
      'restore appdata')
        config__restore_appdata
        ;;
      *)
        config__help
    esac    
  elif test "${CLI_ARGS[1]+isset}"; then
    case "${CLI_ARGS[1]}" in
      wizard)
        config__wizard
        ;;
      *)
        config__help
    esac
  else
    config__help
  fi
}

function config__wizard() {
  if [ "${#CLI_ARGS[@]}" -eq 2 ]; then
    clear
    echo "  __                  __    _____ __   __        "
    echo "_/  |________   _____/  |__/ ____\  | |__|__  ___"
    echo "\   __\_  __ \_/ __ \   __\   __\|  | |  \  \/  /"
    echo " |  |  |  | \/\  ___/|  |  |  |  |  |_|  |>    < "
    echo " |__|  |__|    \_____/__|  |__|  |____/__/__/\__\\"
    echo
    echo
    while true; do
      read -p "Do you want to use CouchPotato? (y/n): " input
      case "$input" in
        [yY] | [yY][Ee][Ss] )
          couchpotato_state="Enabled"
          read -p "Enter a username for the CouchPotato Web UI [Default: admin]: " input
          if [[ -z "${input}" ]]; then
            couchpotato_username="admin"
          else
            couchpotato_username="$input"
          fi
          read -p "Enter a password for the CouchPotato Web UI [Default: admin]: " input
          if [[ -z "${input}" ]]; then
            couchpotato_password="admin"
          else
            couchpotato_password="$input"
          fi
          read -p "Enter a port number for the CouchPotato Web UI [Default: 5050]: " input
          if [[ -z "${input}" ]]; then
            couchpotato_port="5050"
          else
            couchpotato_port="$input"
          fi
          couchpotato_apikey="$(tools__gen_apikey)"
          echo "New CouchPotato API key randomly generated for increased security."
          break;;
        [nN] | [n|N][O|o] )
          couchpotato_state="Disabled"
          break;;
        * )
          echo "!! ERROR: Invalid entry."
          echo
      esac      
    done

    echo
    while true; do
      read -p "Do you want to use Headphones? (y/n): " input
      case "$input" in
        [yY] | [yY][Ee][Ss] )
          headphones_state="Enabled"
          read -p "Enter a username for the Headphones Web UI [Default: admin]: " input
          if [[ -z "${input}" ]]; then
            headphones_username="admin"
          else
            headphones_username="$input"
          fi
          read -p "Enter a password for the Headphones Web UI [Default: admin]: " input
          if [[ -z "${input}" ]]; then
            headphones_password="admin"
          else
            headphones_password="$input"
          fi
          read -p "Enter a port number for the Headphones Web UI [Default: 8181]: " input
          if [[ -z "${input}" ]]; then
            headphones_port="8181"
          else
            headphones_port="$input"
          fi
          headphones_apikey="$(tools__gen_apikey)"
          echo "New Headphones API key randomly generated for increased security."
          break;;
        [nN] | [n|N][O|o] )
          headphones_state="Disabled"
          break;;
        * )
          echo "!! ERROR: Invalid entry."
          echo
      esac      
    done    
      
    echo
    while true; do
      read -p "Do you want to use Plex Media Server? (y/n): " input
      case "$input" in
        [yY] | [yY][Ee][Ss] )
          plexmediaserver_state="Enabled"
          plexmediaserver_port="32400"
          break;;
        [nN] | [n|N][O|o] )
          plexmediaserver_state="Disabled"
          break;;
        * )
          echo "!! ERROR: Invalid entry."
          echo
      esac      
    done  

    echo
    while true; do
      read -p "Do you want to use SABnzbd+? (y/n): " input
      case "$input" in
        [yY] | [yY][Ee][Ss] )
          sabnzbdplus_state="Enabled"
          read -p "Enter a username for the SABnbzd+ Web UI [Default: admin]: " input
          if [[ -z "${input}" ]]; then
            sabnzbdplus_username="admin"
          else
            sabnzbdplus_username="$input"
          fi
          read -p "Enter a password for the SABnbzd+ Web UI [Default: admin]: " input
          if [[ -z "${input}" ]]; then
            sabnzbdplus_password="admin"
          else
            sabnzbdplus_password="$input"
          fi
          read -p "Enter a port number for the SABnbzd+ Web UI [Default: 8080]: " input
          if [[ -z "${input}" ]]; then
            sabnzbdplus_port="8080"
          else
            sabnzbdplus_port="$input"
          fi
          sabnzbdplus_apikey="$(tools__gen_apikey)"
          echo "New SABnzbd+ API key randomly generated for increased security."
          break;;
        [nN] | [n|N][O|o] )
          sabnzbdplus_state="Disabled"
          break;;
        * )
          echo "!! ERROR: Invalid entry."
          echo
      esac      
    done

    echo
    while true; do
      read -p "Do you want to use Sick Beard? (y/n): " input
      case "$input" in
        [yY] | [yY][Ee][Ss] )
          sickbeard_state="Enabled"
          read -p "Enter a username for the Sick Beard Web UI [Default: admin]: " input
          if [[ -z "${input}" ]]; then
            sickbeard_username="admin"
          else
            sickbeard_username="$input"
          fi
          read -p "Enter a password for the Sick Beard Web UI [Default: admin]: " input
          if [[ -z "${input}" ]]; then
            sickbeard_password="admin"
          else
            sickbeard_password="$input"
          fi
          read -p "Enter a port number for the Sick Beard Web UI [Default: 8081]: " input
          if [[ -z "${input}" ]]; then
            sickbeard_port="8081"
          else
            sickbeard_port="$input"
          fi
          sickbeard_apikey="$(tools__gen_apikey)"
          echo "New Sick Beard API key randomly generated for increased security."
          break;;
        [nN] | [n|N][O|o] )
          sickbeard_state="Disabled"
          break;;
        * )
          echo "!! ERROR: Invalid entry."
          echo
      esac      
    done

    echo
    while true; do
      read -p "Do you want to use Transmission? (y/n): " input
      case "$input" in
        [yY] | [yY][Ee][Ss] )
          transmission_state="Enabled"
          read -p "Enter a username for the Transmission Web UI [Default: admin]: " input
          if [[ -z "${input}" ]]; then
            transmission_username="admin"
          else
            transmission_username="$input"
          fi
          read -p "Enter a password for the Transmission Web UI [Default: admin]: " input
          if [[ -z "${input}" ]]; then
            transmission_password="admin"
          else
            transmission_password="$input"
          fi
          read -p "Enter a port number for the Transmission Web UI [Default: 9091]: " input
          if [[ -z "${input}" ]]; then
            transmission_port="9091"
          else
            transmission_port="$input"
          fi
          break;;
        [nN] | [n|N][O|o] )
          transmission_state="Disabled"
          break;;
        * )
          echo "!! ERROR: Invalid entry."
          echo
      esac      
    done
    
		echo	
    while true; do
      read -p "Apply these changes? (y/n): " input
      case "$input" in
        [yY] | [yY][Ee][Ss] )
          break;;
        [nN] | [n|N][O|o] )
          exit 1;;
        * )
          echo "!! ERROR: Invalid entry."
          echo
      esac
    done

    clear
    echo "  __                  __    _____ __   __        "
    echo "_/  |________   _____/  |__/ ____\  | |__|__  ___"
    echo "\   __\_  __ \_/ __ \   __\   __\|  | |  \  \/  /"
    echo " |  |  |  | \/\  ___/|  |  |  |  |  |_|  |>    < "
    echo " |__|  |__|    \_____/__|  |__|  |____/__/__/\__\\"
    echo
    echo
    # Upgrade all apps, prevents newer appdata w/ old app builds issue
    allservices__upgrade
    echo
    echo "Applying configuration changes..."
    echo

    echo "* Configuring CouchPotato"
    couchpotato__stop
    # Prevents config getting out of sync with SABnzbd+ if enabled later
    if [ "$sabnzbdplus_state" == "Enabled" ]; then
      couchpotato__set_sabnzbdplus_port "$sabnzbdplus_port"
      couchpotato__set_sabnzbdplus_apikey "$sabnzbdplus_apikey"     
    fi
    if [ "$couchpotato_state" == "Enabled" ]; then
      couchpotato__set_username "$couchpotato_username"
      couchpotato__set_password "$couchpotato_password"
      couchpotato__set_port "$couchpotato_port"
      couchpotato__set_apikey "$couchpotato_apikey"
      couchpotato__enable
    else
      couchpotato__disable
    fi
    
    echo "* Configuring Headphones"
    headphones__stop
    # Prevents config getting out of sync with SABnzbd+ if enabled later
    if [ "$sabnzbdplus_state" == "Enabled" ]; then
      headphones__set_sabnzbdplus_username "$sabnzbdplus_username"
      headphones__set_sabnzbdplus_password "$sabnzbdplus_password"
      headphones__set_sabnzbdplus_port "$sabnzbdplus_port"
      headphones__set_sabnzbdplus_apikey "$sabnzbdplus_apikey"      
    fi    
    if [ "$headphones_state" == "Enabled" ]; then
      headphones__set_username "$headphones_username"
      headphones__set_password "$headphones_password"
      headphones__set_port "$headphones_port"
      headphones__set_apikey "$headphones_apikey"
      headphones__enable
    else
      headphones__disable
    fi

    echo "* Configuring Plex Media Server"
		# No need to stop Plex Media Server
    if [ "$plexmediaserver_state" == "Enabled" ]; then
      plexmediaserver__enable
    else
      plexmediaserver__disable
    fi
    
    echo "* Configuring SABnzbd+"
    sabnzbdplus__stop
    if [ "$sabnzbdplus_state" == "Enabled" ]; then
      sabnzbdplus__set_username "$sabnzbdplus_username"
      sabnzbdplus__set_password "$sabnzbdplus_password"
      sabnzbdplus__set_port "$sabnzbdplus_port"
      sabnzbdplus__set_apikey "$sabnzbdplus_apikey"
      sabnzbdplus__enable
    else
      sabnzbdplus__disable
    fi

    echo "* Configuring Sick Beard"
    sickbeard__stop
    # Prevents config getting out of sync with SABnzbd+ if enabled later
    if [ "$sabnzbdplus_state" == "Enabled" ]; then
      sickbeard__set_sabnzbdplus_username "$sabnzbdplus_username"
      sickbeard__set_sabnzbdplus_password "$sabnzbdplus_password"
      sickbeard__set_sabnzbdplus_port "$sabnzbdplus_port"
      sickbeard__set_sabnzbdplus_apikey "$sabnzbdplus_apikey"      
    fi
    if [ "$sickbeard_state" == "Enabled" ]; then
      sickbeard__set_username "$sickbeard_username"
      sickbeard__set_password "$sickbeard_password"
      sickbeard__set_port "$sickbeard_port"
      sickbeard__set_apikey "$sickbeard_apikey"
      sickbeard__enable
    else
      sickbeard__disable
    fi

    echo "* Configuring Transmission"
    transmission__stop
    if [ "$transmission_state" == "Enabled" ]; then
      transmission__set_username "$transmission_username"
      transmission__set_password "$transmission_password"
      transmission__set_port "$transmission_port"
      transmission__enable
    else
      transmission__disable
    fi
    
		echo	
    while true; do
      read -p "Do you want to see a config summary? (y/n): " input
      case "$input" in
        [yY] | [yY][Ee][Ss] )
          clear
          echo "  __                  __    _____ __   __        "
          echo "_/  |________   _____/  |__/ ____\  | |__|__  ___"
          echo "\   __\_  __ \_/ __ \   __\   __\|  | |  \  \/  /"
          echo " |  |  |  | \/\  ___/|  |  |  |  |  |_|  |>    < "
          echo " |__|  |__|    \_____/__|  |__|  |____/__/__/\__\\"
          echo
          echo    
          allservices__show_config
          break;;
        [nN] | [n|N][O|o] )
          break;;
        * )
          echo "!! ERROR: Invalid entry."
          echo
      esac
    done
    
    timestamp=$(date "+%Y%m%d%H%M%S")
    sudo su -c -u $osUser "echo $timestamp >> $configDone"
    
  else
    config__help
  fi
}

function config__backup_appdata() {
  if [ "${#CLI_ARGS[@]}" -eq 3 ]; then
    timestamp=$(date "+%Y%m%d%H%M%S")
  
    echo "Creating Backup $tretflixDir/backup-$timestamp.tar"
    echo "Stopping Services..."
    allservices__stop
    
    echo "Creating Archive..."
    sudo su -c -u $osUser "cd $tretflixDir && tar cf backup-$timestamp.tar appdata/"
    
    echo "Starting Services..."
    allservices__start
    echo "Done."
  else
    config__help
  fi
}

function config__restore_appdata() {
  if [ "${#CLI_ARGS[@]}" -eq 4 ]; then
    case "${CLI_ARGS[3]}" in
      '-l' | '--list')
        ls "$tretflixDir" | grep --color="none" "backup-.*tar" 2> /dev/null
        ;;
      *)
        config__help
    esac
  elif [ "${#CLI_ARGS[@]}" -eq 5 ]; then
    case "${CLI_ARGS[3]}" in
      '-f' | '--file')
        if [ "$(tools__path_istype $tretflixDir/${CLI_ARGS[4]})" == "File" ]; then
          file="$(realpath $tretflixDir/${CLI_ARGS[4]})"
        elif [ "$(tools__path_istype ${CLI_ARGS[4]})" == "File" ]; then
          file="$(realpath ${CLI_ARGS[4]})"
        else
          echo "The specified file cannot be found."
          echo
          exit 1
        fi
        
        echo "Restoring Backup $file"
        echo "Stopping Services..."
        allservices__stop

        # Upgrade all apps, prevents newer appdata w/ old app builds issue
        allservices__upgrade
    
        echo "Unpacking Archive..."
        timestamp=$(date "+%Y%m%d%H%M%S")
        sudo su -c -u $osUser "cd $tretflixDir && tar cf replaced-$timestamp.tar appdata/"
        rm -rf /opt/tretflix/appdata/
        sudo su -c -u $osUser "tar -xf $file -C $tretflixDir/"
    
        echo "Starting Services..."
        if [ "$(tools__path_istype $couchpotato_appdata/.enabled)" == "File" ]; then
          couchpotato__enable
        elif [ "$(tools__path_istype $couchpotato_appdata/.disabled)" == "File" ]; then
          couchpotato__disable
        fi
        if [ "$(tools__path_istype $headphones_appdata/.enabled)" == "File" ]; then
          headphones__enable
        elif [ "$(tools__path_istype $headphones_appdata/.disabled)" == "File" ]; then
          headphones__disable
        fi
        if [ "$(tools__path_istype $sabnzbdplus_appdata/.enabled)" == "File" ]; then
          sabnzbdplus__enable
        elif [ "$(tools__path_istype $sabnzbdplus_appdata/.disabled)" == "File" ]; then
          sabnzbdplus__disable
        fi
        if [ "$(tools__path_istype $sickbeard_appdata/.enabled)" == "File" ]; then
          sickbeard__enable
        elif [ "$(tools__path_istype $sickbeard_appdata/.disabled)" == "File" ]; then
          sickbeard__disable
        fi
        if [ "$(tools__path_istype $transmission_appdata/.enabled)" == "File" ]; then
          transmission__enable
        elif [ "$(tools__path_istype $transmission_appdata/.disabled)" == "File" ]; then
          transmission__disable
        fi
        if [ "$(tools__path_istype $plexmediaserver_appdata/.enabled)" == "File" ]; then
          plexmediaserver__enable
        elif [ "$(tools__path_istype $plexmediaserver_appdata/.disabled)" == "File" ]; then
          plexmediaserver__disable
        fi
        echo "Done."

        timestamp=$(date "+%Y%m%d%H%M%S")
        sudo su -c -u $osUser "echo $timestamp >> $restoreDone"
        ;;
      *)
        config__help
    esac
  else
    config__help
  fi
}
