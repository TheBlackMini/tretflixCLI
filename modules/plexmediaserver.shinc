# avoid double inclusion
if test "${plexmediaserver__imported+defined}" == "defined"; then
  return 0
fi
plexmediaserver__imported=1

function plexmediaserver__get_status() {
  if service plexmediaserver status | egrep "start|running" > /dev/null 2>&1; then
    result="Enabled and Running"
  elif ! ls -l /etc/init/plexmediaserver.override > /dev/null 2>&1; then
    result="Not Running"
  else
    result="Disabled"
  fi
  echo "$result"
}

function plexmediaserver__enable() {
  if [ "$(plexmediaserver__get_status)" == "Disabled" ]; then
    rm /etc/init/plexmediaserver.override > /dev/null 2>&1
    if [ "$(tools__path_istype $plexmediaserver_appdata/.disabled)" == "File" ]; then
      rm -f $plexmediaserver_appdata/.disabled > /dev/null 2>&1
    fi
    timestamp=$(date "+%Y%m%d%H%M%S")
    sudo su -c -u $osUser "echo $timestamp > $plexmediaserver_appdata/.enabled"
  fi
  plexmediaserver__start
}

function plexmediaserver__disable() {
  if [ "$(plexmediaserver__get_status)" != "Disabled" ]; then
    plexmediaserver__stop
    echo -e "manual" >> /etc/init/plexmediaserver.override
    if [ "$(tools__path_istype $plexmediaserver_appdata/.enabled)" == "File" ]; then
      rm -f $plexmediaserver_appdata/.enabled > /dev/null 2>&1
    fi
    timestamp=$(date "+%Y%m%d%H%M%S")
    sudo su -c -u $osUser "echo $timestamp > $plexmediaserver_appdata/.disabled"
  fi
}

function plexmediaserver__upgrade() {
  echo
  echo "Review the Plex Media Server upgrade options below..."
  echo
  echo "1. Automatically grab the latest public release."
  echo "2. Enter URL for the latest Plex Pass release."
  echo
  while true; do
    read -p "Enter option [Default: 1]: " input
    if [[ -z "${input}" ]]; then
      input="1"
    fi
    echo
    case "$input" in
      1 | 1. )
        downloadPage=$(curl https://plex.tv/downloads 2> /dev/null)
        if uname -a | grep -q "i386"; then
          url=$(echo "$downloadPage" | grep 'i386.deb">' | head -1 | sed -e 's/^.*href="\(.*\)">.*$/\1/')
        else
          url=$(echo "$downloadPage" | grep 'amd64.deb">' | head -1 | sed -e 's/^.*href="\(.*\)">.*$/\1/')
        fi
        break;;
      2 | 2. )
        read -p "Enter URL: " input
        url="$input"
        echo
        break;;
      * )
        echo "!! ERROR: Invalid entry."
        echo
    esac
  done
  
  if ! tools__url_exists "$url"; then
    echo "Invalid URL, cannot be reached"
    echo
    exit 1
  fi
  
  if ! echo "$url" | grep -q -i ".deb$"; then
    echo "Invalid URL, .deb installer needed"
    echo
    exit 1
  fi
 
  # Verify correct package (x86/x64) for OS
  osBuild=$(uname -a)
  if echo "$osBuild" | grep -q "i386" && echo "$url" | grep -q "amd64.deb$"; then
    echo "Version mismatch, 32bit installer needed"
    echo
    exit 1
  elif echo "$osBuild" | grep -q "x86_x64" && echo "$url" | grep -q "i386.deb$"; then
    echo "Version mismatch, 64bit installer needed"
    echo
    exit 1
  fi

  filename=$(basename "$url")

  echo "Downloading installer..."
  wget -O /tmp/"$filename" "$url" > /dev/null 2>&1  
  if [ $? -ne 0 ]; then
    echo "Installation failed, download error"
    echo
    exit 1
  fi

  echo "Upgrading Plex Media Server..."
  plexmediaserver__stop
  gdebi --n /tmp/"$filename" > /dev/null 2>&1
  if [ $? -ne 0 ]; then
    echo "Installation failed"
    echo
    exit 1
  fi
  
  plexmediaserver__start
  
  rm -f /tmp/"$filename" > /dev/null 2>&1
}

function plexmediaserver__start() {
  if [ "$(plexmediaserver__get_status)" != "Disabled" ]; then
    for i in {1..3}; do
      if [ $i -gt 1 ]; then
        sleep 5
      fi
      if [ "$(plexmediaserver__get_status)" != "Enabled and Running" ]; then
        service plexmediaserver start > /dev/null 2>&1
      else
        break
      fi
    done
  fi
}

function plexmediaserver__stop() {
  for i in {1..3}; do
    if [ $i -gt 1 ]; then
      sleep 5
    fi
    if [ "$(plexmediaserver__get_status)" == "Enabled and Running" ]; then
      service plexmediaserver stop > /dev/null 2>&1
    else
      break
    fi
  done
}

function plexmediaserver__show_config() {
  status="$(plexmediaserver__get_status)"
  ipv4=$(tools__get_ip)
  port="32400"

  echo "Plex Media Server Config:"
  echo "----------------------------"
  echo "Status: $status"
  if [ "$status" == "Enabled and Running" ]; then
    echo "Web UI: http://$ipv4:$port/web"
  fi
}