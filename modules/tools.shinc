# avoid double inclusion
if test "${tools__imported+defined}" == "defined"; then
  return 0
fi
tools__imported=1

function tools__cifs_test() {
  # Prepare the share and test mountpoint variables for the test using arguments passed into the function
  host="$1"
  share="//$1/$2"
  mountPoint="/mnt/.test"

  # If the test mountpoint is already in use, unmount it
  if tools__mountpoint_isactive $mountPoint; then
    umount $mountPoint > /dev/null 2>&1
    if [ $? -ne 0 ]; then
      echo "Failed to unmount the test mount path"
      return 1
    fi
  fi

  # Verify that the host is reachable and/or hostname can be resolved
  tools__host_ping $host
  if [ $? -ne 0 ]; then
    return 1
  fi

  # Verify that the CIFS services are available on the host
  smbclient -L $host -N > /dev/null 2>&1
  if [ $? -ne 0 ]; then
    echo "Unable to connect to CIFS services on the host"
    return 1
  fi

  # Perform the test mount, output errors if unsuccessful
  if [ $# -eq 2 ]; then
    output=$(mount -t cifs $share $mountPoint -o guest,sec=ntlm 2>&1)
  else
    output=$(mount -t cifs $share $mountPoint -o user=$3,pass=$4,sec=ntlm 2>&1)
  fi
  if [ $? -eq 0 ]; then
    umount $mountPoint
    return 0
  else
    if echo $output | grep -q "Retrying with upper case share name.*No such device or address"; then
      echo "No such share found on the host"
    elif echo $output | grep -q "mount error.*Permission denied"; then
      echo "Access denied, a valid login/password is required"
    else
      echo "$output"
    fi
    return 1
  fi
}

function tools__nfs_test() {
  # Prepare the share and test mountpoint variables for the test using arguments passed into the function
  host="$1"
  share="$1:$2"
  mountPoint="/mnt/.test"

  # If the test mountpoint is already in use, unmount it
  if tools__mountpoint_isactive $mountPoint; then
    umount $mountPoint > /dev/null 2>&1
    if [ $? -ne 0 ]; then
      echo "Failed to unmount the test mount path"
      return 1
    fi
  fi
  
  # Verify that the host is reachable and/or hostname can be resolved
  tools__host_ping $host
  if [ $? -ne 0 ]; then
    return 1
  fi

  # Verify that the NFS services are available on the host
  rpcinfo -t $host nfs > /dev/null 2>&1
  if [ $? -ne 0 ]; then
    echo "Unable to connect to NFS services on the host"
    return 1
  fi
  
  # Perform the test mount, output errors if unsuccessful
  output=$(mount -t nfs $share $mountPoint 2>&1)
  if [ $? -eq 0 ]; then
    umount $mountPoint
    return 0
  else
    if echo $output | grep -q "access denied by server while mounting"; then
      echo "Access denied, share access is restricted or no such share found on the host"
    else
      echo "$output"
    fi
    return 1
  fi
}

function tools__host_ping() {
  output=$(ping -c 1 "$1" 2>&1)
  exitCode=$?
  if [ $exitCode -eq 0 ]; then
    return 0
  else
    if [ $exitCode -eq 1 ]; then
      echo "Unable to ping the host"
    elif [ $exitCode -eq 2 ]; then
      echo "Unable to resolve the hostname"
    else
      echo "$output"
    fi
    return 1
  fi
}

function tools__path_exists() {
  if [ "$(tools__path_istype $1)" != "No such file or directory" ]; then
    true
  else
    false
  fi
}

function tools__path_istype() {
  if [ -d "$1" ]; then
    result="Directory"
  elif [ -f "$1" ]; then
    result="File"
  elif [ -L "$1" ]; then
    result="Symlink"
  else
    result="No such file or directory"
  fi
  echo $result
}

function tools__dir_isempty() {
  if [ ! "$(ls -A $1 2> /dev/null)" ]; then
    true
  else
    false
  fi
}

function tools__share_exists() {
  if cat /etc/fstab | grep -q "^$1.*$2"; then
    true
  else
    false
  fi
}

function tools__share_isactive() {
  if df | grep -q "^$1.*$2$"; then
    true
  else
    false
  fi
}

function tools__mountpoint_exists() {
  if cat /etc/fstab | grep -q " $1"; then
    true
  else
    false
  fi
}

function tools__mountpoint_isactive() {
  if df | grep -q "$1$"; then
    true
  else
    false
  fi
}

function tools__service_isrunning() {
  output=$(service "$1" status 2>&1)
  exitCode=$?
  if [ $exitCode -eq 0 ]; then
    true
  else
  	false
  fi
}

function tools__service_isenabled() {
  output=$(ls /etc/rc?.d/*"$1" 2>&1)
  exitCode=$?
  if [ $exitCode -eq 0 ]; then
    true
  else
  	false
  fi
}
  
function tools__gen_apikey() {
  apikey=$(date +%s | sha256sum | base64 | head -c 32 | tr -s '[:upper:]'  '[:lower:]')
  echo $apikey
}

function tools__get_ip() {
  if ifconfig eth0:1 | grep "inet addr" > /dev/null 2>&1; then
    result=$(ifconfig eth0:1 | grep "inet addr" | awk '{print $2}' | sed 's/addr://g')
  else
    result=$(ifconfig eth0 | grep "inet addr" | awk '{print $2}' | sed 's/addr://g')
  fi
  echo $result
}