# avoid double inclusion
if test "${update__imported+defined}" == "defined"; then
  return 0
fi
update__imported=1

function update__help() {
  echo "Usage: tretflix update [COMMAND] [OPTION]"
  echo
  echo "COMMANDS:"
  echo "  tretflix update cli [OPTION] ..."
  echo
  echo "OPTIONS:"
  echo "  -b, --branch [NAME]"
  echo
  exit 1
}

function update__command_handler() {
  if test "${CLI_ARGS[1]+isset}"; then
    case "${CLI_ARGS[1]}" in
    	'cli')
    	  if [ "${#CLI_ARGS[@]}" -eq 2 ]; then
    	    update__cli ""
    	  elif [ "${#CLI_ARGS[@]}" -eq 4 ]; then
    	    case "${CLI_ARGS[2]}" in
            '-b' | '--branch')
              update__cli "${CLI_ARGS[3]}"
              ;;
						*)
							update__help
					esac
				else
					update__help
				fi
				;;
      *)
        update__help
    esac
  else
    update__help
  fi
}

function update__cli() {
  branch="$1"
  
  # If branch is blank, use the main branch and suppress git output
  if [ -z "$branch" ]; then
    if cd "$cliPath" && git fetch -v --dry-run 2>&1 | grep "v1.3" | grep -q 'up to date'; then
      echo "Tretflix CLI is up-to-date."
    else
      cd $cliPath
		  git fetch -v > /dev/null 2>&1
		  git checkout -f v1.3 > /dev/null 2>&1
		  git merge origin/v1.3 > /dev/null 2>&1
			
			chmod +x "$0"
			echo "Tretflix CLI has been updated."
		fi
  elif [ "$branch" == "v1.3" -o "$branch" == "develop" ]; then
    cd $cliPath
		git fetch -v
		git checkout -f $branch
		git merge origin/$branch
		
		chmod +x "$0"
	else
	  echo "Invalid Branch"
	  echo
	  exit 1
  fi
}