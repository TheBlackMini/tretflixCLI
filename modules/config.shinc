# avoid double inclusion
if test "${config__imported+defined}" == "defined"; then
  return 0
fi
config__imported=1

function config__help() {
  echo "Usage: tretflix config [COMMAND] [OPTION]"
  echo
  echo "COMMANDS:"
  echo "  tretflix config wizard"
  echo "  tretflix config backup appdata"
  echo "  tretflix config restore appdata [OPTION] ..."
  echo
  echo "OPTIONS:"
  echo "  -l, --list"
  echo "  -f, --file [FILE]"
  echo
  echo "NOTES:" 
  echo "  Backups will be saved in /opt/tretflix. When restoring a" 
  echo "  backup, provide the backup filename or the full path to"
  echo "  the backup file if it's not in /opt/tretflix."
  echo
  exit 1
}

function config__command_handler() {
  if test "${CLI_ARGS[2]+isset}"; then
    case "${CLI_ARGS[1]} ${CLI_ARGS[2]}" in
      'backup appdata')
        config__backup_appdata
        ;;
      'restore appdata')
        config__restore_appdata
        ;;
      *)
        config__help
    esac    
  elif test "${CLI_ARGS[1]+isset}"; then
    case "${CLI_ARGS[1]}" in
      wizard)
        config__wizard
        ;;
      *)
        config__help
    esac
  else
    config__help
  fi
}

function config__wizard() {
  if [ "${#CLI_ARGS[@]}" -eq 2 ]; then
    clear
    echo "  __                  __    _____ __   __        "
    echo "_/  |________   _____/  |__/ ____\  | |__|__  ___"
    echo "\   __\_  __ \_/ __ \   __\   __\|  | |  \  \/  /"
    echo " |  |  |  | \/\  ___/|  |  |  |  |  |_|  |>    < "
    echo " |__|  |__|    \_____/__|  |__|  |____/__/__/\__\\"
    echo
    echo
    while true; do
      read -p "Do you want to use CouchPotato? (y/n): " input
      case "$input" in
        [yY] | [yY][Ee][Ss] )
          couchpotatoAction="Enable"
          read -p "Enter a username for the CouchPotato Web UI [Default: admin]: " input
          if [[ -z "${input}" ]]; then
            couchpotatoUser="admin"
          else
            couchpotatoUser="$input"
          fi
          read -p "Enter a password for the CouchPotato Web UI [Default: admin]: " input
          if [[ -z "${input}" ]]; then
            couchpotatoPass="admin"
          else
            couchpotatoPass="$input"
          fi
          read -p "Enter a port number for the CouchPotato Web UI [Default: 5050]: " input
          if [[ -z "${input}" ]]; then
            couchpotatoPort="5050"
          else
            couchpotatoPort="$input"
          fi
          couchpotatoAPIkey="$(tools__gen_apikey)"
          echo "New CouchPotato API key randomly generated for increased security."
          break;;
        [nN] | [n|N][O|o] )
          couchpotatoAction="Disable"
          break;;
        * )
          echo "!! ERROR: Invalid entry."
          echo
      esac      
    done

    echo
    while true; do
      read -p "Do you want to use Headphones? (y/n): " input
      case "$input" in
        [yY] | [yY][Ee][Ss] )
          headphonesAction="Enable"
          read -p "Enter a username for the Headphones Web UI [Default: admin]: " input
          if [[ -z "${input}" ]]; then
            headphonesUser="admin"
          else
            headphonesUser="$input"
          fi
          read -p "Enter a password for the Headphones Web UI [Default: admin]: " input
          if [[ -z "${input}" ]]; then
            headphonesPass="admin"
          else
            headphonesPass="$input"
          fi
          read -p "Enter a port number for the Headphones Web UI [Default: 8181]: " input
          if [[ -z "${input}" ]]; then
            headphonesPort="8181"
          else
            headphonesPort="$input"
          fi
          headphonesAPIkey="$(tools__gen_apikey)"
          echo "New Headphones API key randomly generated for increased security."
          break;;
        [nN] | [n|N][O|o] )
          headphonesAction="Disable"
          break;;
        * )
          echo "!! ERROR: Invalid entry."
          echo
      esac      
    done  
    
    echo
    while true; do
      read -p "Do you want to use NzbDrone? (y/n): " input
      case "$input" in
        [yY] | [yY][Ee][Ss] )
          nzbdroneAction="Enable"
          read -p "Enter a username for the NzbDrone Web UI [Default: admin]: " input
          if [[ -z "${input}" ]]; then
            nzbdroneUser="admin"
          else
            nzbdroneUser="$input"
          fi
          read -p "Enter a password for the NzbDrone Web UI [Default: admin]: " input
          if [[ -z "${input}" ]]; then
            nzbdronePass="admin"
          else
            nzbdronePass="$input"
          fi
          read -p "Enter a port number for the NzbDrone Web UI [Default: 8989]: " input
          if [[ -z "${input}" ]]; then
            nzbdronePort="8989"
          else
            nzbdronePort="$input"
          fi
          nzbdroneAPIkey="$(tools__gen_apikey)"
          echo "New NzbDrone API key randomly generated for increased security."
          break;;
        [nN] | [n|N][O|o] )
          nzbdroneAction="Disable"
          break;;
        * )
          echo "!! ERROR: Invalid entry."
          echo
      esac      
    done   
      
    echo
    while true; do
      read -p "Do you want to use Plex Media Server? (y/n): " input
      case "$input" in
        [yY] | [yY][Ee][Ss] )
          plexserverAction="Enable"
          plexserverPort="32400"
          break;;
        [nN] | [n|N][O|o] )
          plexserverAction="Disable"
          break;;
        * )
          echo "!! ERROR: Invalid entry."
          echo
      esac      
    done  

    echo
    while true; do
      read -p "Do you want to use SABnzbd+? (y/n): " input
      case "$input" in
        [yY] | [yY][Ee][Ss] )
          sabnzbdAction="Enable"
          read -p "Enter a username for the SABnbzd+ Web UI [Default: admin]: " input
          if [[ -z "${input}" ]]; then
            sabnzbdUser="admin"
          else
            sabnzbdUser="$input"
          fi
          read -p "Enter a password for the SABnbzd+ Web UI [Default: admin]: " input
          if [[ -z "${input}" ]]; then
            sabnzbdPass="admin"
          else
            sabnzbdPass="$input"
          fi
          read -p "Enter a port number for the SABnbzd+ Web UI [Default: 8080]: " input
          if [[ -z "${input}" ]]; then
            sabnzbdPort="8080"
          else
            sabnzbdPort="$input"
          fi
          sabnzbdAPIkey="$(tools__gen_apikey)"
          echo "New SABnzbd+ API key randomly generated for increased security."
          break;;
        [nN] | [n|N][O|o] )
          sabnzbdAction="Disable"
          break;;
        * )
          echo "!! ERROR: Invalid entry."
          echo
      esac      
    done

    echo
    while true; do
      read -p "Do you want to use Sick Beard? (y/n): " input
      case "$input" in
        [yY] | [yY][Ee][Ss] )
          sickbeardAction="Enable"
          read -p "Enter a username for the Sick Beard Web UI [Default: admin]: " input
          if [[ -z "${input}" ]]; then
            sickbeardUser="admin"
          else
            sickbeardUser="$input"
          fi
          read -p "Enter a password for the Sick Beard Web UI [Default: admin]: " input
          if [[ -z "${input}" ]]; then
            sickbeardPass="admin"
          else
            sickbeardPass="$input"
          fi
          read -p "Enter a port number for the Sick Beard Web UI [Default: 8081]: " input
          if [[ -z "${input}" ]]; then
            sickbeardPort="8081"
          else
            sickbeardPort="$input"
          fi
          sickbeardAPIkey="$(tools__gen_apikey)"
          echo "New Sick Beard API key randomly generated for increased security."
          break;;
        [nN] | [n|N][O|o] )
          sickbeardAction="Disable"
          break;;
        * )
          echo "!! ERROR: Invalid entry."
          echo
      esac      
    done

    echo
    while true; do
      read -p "Do you want to use Transmission? (y/n): " input
      case "$input" in
        [yY] | [yY][Ee][Ss] )
          transmissionAction="Enable"
          read -p "Enter a username for the Transmission Web UI [Default: admin]: " input
          if [[ -z "${input}" ]]; then
            transmissionUser="admin"
          else
            transmissionUser="$input"
          fi
          read -p "Enter a password for the Transmission Web UI [Default: admin]: " input
          if [[ -z "${input}" ]]; then
            transmissionPass="admin"
          else
            transmissionPass="$input"
          fi
          read -p "Enter a port number for the Transmission Web UI [Default: 9091]: " input
          if [[ -z "${input}" ]]; then
            transmissionPort="9091"
          else
            transmissionPort="$input"
          fi
          break;;
        [nN] | [n|N][O|o] )
          transmissionAction="Disable"
          break;;
        * )
          echo "!! ERROR: Invalid entry."
          echo
      esac      
    done
    
		echo	
    while true; do
      read -p "Apply these changes? (y/n): " input
      case "$input" in
        [yY] | [yY][Ee][Ss] )
          break;;
        [nN] | [n|N][O|o] )
          exit 1;;
        * )
          echo "!! ERROR: Invalid entry."
          echo
      esac
    done

    clear
    echo "  __                  __    _____ __   __        "
    echo "_/  |________   _____/  |__/ ____\  | |__|__  ___"
    echo "\   __\_  __ \_/ __ \   __\   __\|  | |  \  \/  /"
    echo " |  |  |  | \/\  ___/|  |  |  |  |  |_|  |>    < "
    echo " |__|  |__|    \_____/__|  |__|  |____/__/__/\__\\"
    echo
    echo
    # Upgrade all apps, prevents newer appdata w/ old app builds issue
    echo "* Updating apt repository package lists"
    apt-get update

    if [ "$sabnzbdAction" == "Enable" ]; then
      echo
      if ! echo "$(sabnzbd__get_status)" | grep -q "^Enabled"; then
        echo "* Enabling SABnzbd+"
        sabnzbd__enable
      fi
      echo "* Configuring SABnzbd+"
      sabnzbd__stop
      sabnzbd__set_username "$sabnzbdUser"
      sabnzbd__set_password "$sabnzbdPass"
      sabnzbd__set_port "$sabnzbdPort"
      sabnzbd__set_apikey "$sabnzbdAPIkey"
      
      if sabnzbd__version_check; then
        echo "* Upgrading SABnzbd+"
        sabnzbd__upgrade
      fi
      
      sabnzbd__start
    else
      if echo "$(sabnzbd__get_status)" | grep -q "^Enabled"; then
        echo
        echo "* Disabling SABnzbd+"
        sabnzbd__stop
        sabnzbd__disable
      fi
    fi
    
    if [ "$plexserverAction" == "Enable" ]; then
      echo
      if ! echo "$(plexserver__get_status)" | grep -q "^Enabled"; then
        echo "* Enabling Plex Media Server"
        plexserver__enable
      fi
      echo "* Configuring Plex Media Server"
      plexserver__stop
      # None for now
      
      if plexserver__version_check; then
        echo "* Upgrading Plex Media Server"
        plexserver__upgrade
      fi
      
      plexserver__start
    else
      if echo "$(plexserver__get_status)" | grep -q "^Enabled"; then
        echo
        echo "Disabling Plex Media Server"
        plexserver__stop
        plexserver__disable
      fi
    fi
    
    if [ "$couchpotatoAction" == "Enable" ]; then
      echo
      if ! echo "$(couchpotato__get_status)" | grep -q "^Enabled"; then
        echo "* Enabling CouchPotato"
        couchpotato__enable
      fi
      echo "* Configuring CouchPotato"
      couchpotato__stop
      couchpotato__set_username "$couchpotatoUser"
      couchpotato__set_password "$couchpotatoPass"
      couchpotato__set_port "$couchpotatoPort"
      couchpotato__set_apikey "$couchpotatoAPIkey"
      
      if couchpotato__version_check; then
        echo "* Upgrading CouchPotato"
        couchpotato__upgrade
      fi
      
      couchpotato__start
    else
      if echo "$(couchpotato__get_status)" | grep -q "^Enabled"; then
        echo
        echo "* Disabling CouchPotato"
        couchpotato__stop
        couchpotato__disable
      fi
    fi
   
    if [ "$headphonesAction" == "Enable" ]; then
      echo
      if ! echo "$(headphones__get_status)" | grep -q "^Enabled"; then
        echo "* Enabling Headphones"
        headphones__enable
      fi
      echo "* Configuring Headphones"
      headphones__stop
      headphones__set_username "$headphonesUser"
      headphones__set_password "$headphonesPass"
      headphones__set_port "$headphonesPort"
      headphones__set_apikey "$headphonesAPIkey"
      
      if headphones__version_check; then
        echo "* Upgrading Headphones"
        headphones__upgrade
      fi
      
      headphones__start
    else
      if echo "$(headphones__get_status)" | grep -q "^Enabled"; then
        echo
        echo "* Disabling Headphones"
        headphones__stop
        headphones__disable
      fi
    fi
    
    if [ "$nzbdroneAction" == "Enable" ]; then
      echo
      if ! echo "$(nzbdrone__get_status)" | grep -q "^Enabled"; then
        echo "* Enabling NzbDrone"
        nzbdrone__enable
      fi
      echo "* Configuring NzbDrone"
      nzbdrone__stop
      nzbdrone__set_username "$nzbdroneUser"
      nzbdrone__set_password "$nzbdronePass"
      nzbdrone__set_port "$nzbdronePort"
      nzbdrone__set_apikey "$nzbdroneAPIkey"
      
      if nzbdrone__version_check; then
        echo "* Upgrading NzbDrone"
        nzbdrone__upgrade
      fi
      
      nzbdrone__start
    else
      if echo "$(nzbdrone__get_status)" | grep -q "^Enabled"; then
        echo
        echo "* Disabling NzbDrone"
        nzbdrone__stop
        nzbdrone__disable
      fi
    fi

    if [ "$sickbeardAction" == "Enable" ]; then
      echo
      if ! echo "$(sickbeard__get_status)" | grep -q "^Enabled"; then
        echo "* Enabling Sick Beard"
        sickbeard__enable
      fi
      echo "* Configuring Sick Beard"
      sickbeard__stop
      sickbeard__set_username "$sickbeardUser"
      sickbeard__set_password "$sickbeardPass"
      sickbeard__set_port "$sickbeardPort"
      sickbeard__set_apikey "$sickbeardAPIkey"
      
      if sickbeard__version_check; then
        echo "* Upgrading Sick Beard"
        sickbeard__upgrade
      fi
      
      sickbeard__start
    else
      if echo "$(sickbeard__get_status)" | grep -q "^Enabled"; then
        echo
        echo "* Disabling Sick Beard"
        sickbeard__stop
        sickbeard__disable
      fi
    fi

    if [ "$transmissionAction" == "Enable" ]; then
      echo
      if ! echo "$(transmission__get_status)" | grep -q "^Enabled"; then
        echo "* Enabling Transmission"
        transmission__enable
      fi
      echo "* Configuring Transmission"
      transmission__stop
      transmission__set_username "$transmissionUser"
      transmission__set_password "$transmissionPass"
      transmission__set_port "$transmissionPort"
      
      if transmission__version_check; then
        echo "* Upgrading Transmission"
        transmission__upgrade
      fi
      
      transmission__start
    else
      if echo "$(transmission__get_status)" | grep -q "^Enabled"; then
        echo
        echo "* Disabling Transmission"
        transmission__stop
        transmission__disable
      fi
    fi

    echo    
    while true; do
      read -p "Do you want to see a config summary? (y/n): " input
      case "$input" in
        [yY] | [yY][Ee][Ss] )
          clear
          echo "  __                  __    _____ __   __        "
          echo "_/  |________   _____/  |__/ ____\  | |__|__  ___"
          echo "\   __\_  __ \_/ __ \   __\   __\|  | |  \  \/  /"
          echo " |  |  |  | \/\  ___/|  |  |  |  |  |_|  |>    < "
          echo " |__|  |__|    \_____/__|  |__|  |____/__/__/\__\\"
          echo
          echo    
          allservices__show_config
          break;;
        [nN] | [n|N][O|o] )
          break;;
        * )
          echo "!! ERROR: Invalid entry."
          echo
      esac
    done
    
    timestamp=$(date "+%Y%m%d%H%M%S")
    sudo su -c -u $osUser \
      "echo config-wizard_$timestamp >> $configFlag"
    
  else
    config__help
  fi
}

function config__backup_appdata() {
  if [ "${#CLI_ARGS[@]}" -eq 3 ]; then
    timestamp=$(date "+%Y%m%d%H%M%S")
  
    echo "* Stopping Services"
    allservices__stop
    
    echo "* Creating Backup Archive"
    sudo su -c -u $osUser \
      "cd $tretflixPath && tar cvf backup-$timestamp.tar appdata/"
    
    echo "* Restarting Services"
    allservices__start
    
    echo "* Backup Saved to $tretflixPath/backup-$timestamp.tar"
  else
    config__help
  fi
}

function config__restore_appdata() {
  if [ "${#CLI_ARGS[@]}" -eq 4 ]; then
    case "${CLI_ARGS[3]}" in
      '-l' | '--list')
        ls "$tretflixPath" | grep --color="none" "backup-.*tar" 2> /dev/null
        exit 0
        ;;
      *)
        config__help
    esac
  elif [ "${#CLI_ARGS[@]}" -eq 5 ]; then
    case "${CLI_ARGS[3]}" in
      '-f' | '--file')
        if [ "$(tools__path_istype ${CLI_ARGS[4]})" == "File" ]; then
          file="$(realpath ${CLI_ARGS[4]})"
        elif [ "$(tools__path_istype $tretflixPath/${CLI_ARGS[4]})" == "File" ]; then
          file="$(realpath $tretflixPath/${CLI_ARGS[4]})"
        else
          echo "The specified file cannot be found"
          echo
          exit 1
        fi
        ;;
      *)
        config__help
    esac
    
    echo "* Backing Up Current AppData"
    timestamp=$(date "+%Y%m%d%H%M%S")
    sudo su -c -u $osUser \
      "cd $tretflixPath && tar cvf archived-$timestamp.tar appdata/"
        
    clear
    echo "  __                  __    _____ __   __        "
    echo "_/  |________   _____/  |__/ ____\  | |__|__  ___"
    echo "\   __\_  __ \_/ __ \   __\   __\|  | |  \  \/  /"
    echo " |  |  |  | \/\  ___/|  |  |  |  |  |_|  |>    < "
    echo " |__|  |__|    \_____/__|  |__|  |____/__/__/\__\\"
    echo
    echo
    if tar -tf "$file" | grep -q "^appdata/couchpotato/$"; then
      while true; do
        read -p "Do you want to restore and use CouchPotato? (y/n): " input
        case "$input" in
          [yY] | [yY][Ee][Ss] )
            couchpotatoAction="Restore"
            break;;
          [nN] | [n|N][O|o] )
            couchpotatoAction="None"   
            break;;
          * )
            echo "!! ERROR: Invalid entry."
            echo
        esac      
      done
    fi

    if tar -tf "$file" | grep -q "^appdata/headphones/$"; then
      while true; do
        read -p "Do you want to restore and use Headphones? (y/n): " input
        case "$input" in
          [yY] | [yY][Ee][Ss] )
            headphonesAction="Restore"
            break;;
          [nN] | [n|N][O|o] )
            headphonesAction="None"   
            break;;
          * )
            echo "!! ERROR: Invalid entry."
            echo
        esac      
      done
    fi
    
    if tar -tf "$file" | grep -q "^appdata/nzbdrone/$"; then
      while true; do
        read -p "Do you want to restore and use NzbDrone? (y/n): " input
        case "$input" in
          [yY] | [yY][Ee][Ss] )
            nzbdroneAction="Restore"
            break;;
          [nN] | [n|N][O|o] )
            nzbdroneAction="None"   
            break;;
          * )
            echo "!! ERROR: Invalid entry."
            echo
        esac      
      done
    fi

    if tar -tf "$file" | grep -q "^appdata/plexmediaserver/$"; then
      while true; do
        read -p "Do you want to restore and use Plex Media Server? (y/n): " input
        case "$input" in
          [yY] | [yY][Ee][Ss] )
            plexserverAction="Restore"
            break;;
          [nN] | [n|N][O|o] )
            plexserverAction="None"   
            break;;
          * )
            echo "!! ERROR: Invalid entry."
            echo
        esac      
      done
    fi
    
    if tar -tf "$file" | grep -q "^appdata/sabnzbdplus/$"; then
      while true; do
        read -p "Do you want to restore and use SABnzbd+? (y/n): " input
        case "$input" in
          [yY] | [yY][Ee][Ss] )
            sabnzbdAction="Restore"
            break;;
          [nN] | [n|N][O|o] )
            sabnzbdAction="None"   
            break;;
          * )
            echo "!! ERROR: Invalid entry."
            echo
        esac      
      done
    fi

    if tar -tf "$file" | grep -q "^appdata/sickbeard/$"; then
      while true; do
        read -p "Do you want to restore and use Sick Beard? (y/n): " input
        case "$input" in
          [yY] | [yY][Ee][Ss] )
            sickbeardAction="Restore"
            break;;
          [nN] | [n|N][O|o] )
            sickbeardAction="None"   
            break;;
          * )
            echo "!! ERROR: Invalid entry."
            echo
        esac      
      done
    fi
    
    if tar -tf "$file" | grep -q "^appdata/transmission-daemon/$"; then
      while true; do
        read -p "Do you want to restore and use Transmission? (y/n): " input
        case "$input" in
          [yY] | [yY][Ee][Ss] )
            transmissionAction="Restore"
            break;;
          [nN] | [n|N][O|o] )
            transmissionAction="None"   
            break;;
          * )
            echo "!! ERROR: Invalid entry."
            echo
        esac      
      done
    fi

		echo	
    while true; do
      read -p "Apply these changes? (y/n): " input
      case "$input" in
        [yY] | [yY][Ee][Ss] )
          break;;
        [nN] | [n|N][O|o] )
          exit 1;;
        * )
          echo "!! ERROR: Invalid entry."
          echo
      esac
    done

    clear
    echo "  __                  __    _____ __   __        "
    echo "_/  |________   _____/  |__/ ____\  | |__|__  ___"
    echo "\   __\_  __ \_/ __ \   __\   __\|  | |  \  \/  /"
    echo " |  |  |  | \/\  ___/|  |  |  |  |  |_|  |>    < "
    echo " |__|  |__|    \_____/__|  |__|  |____/__/__/\__\\"
    echo
    echo
    # Upgrade all apps, prevents newer appdata w/ old app builds issue
    echo "* Updating apt repository package lists"
    apt-get update
    
    if [ "$sabnzbdAction" == "Restore" ]; then
      echo
      if ! echo "$(sabnzbd__get_status)" | grep -q "^Enabled"; then
        echo "* Enabling SABnzbd+"
        sabnzbd__enable
      fi
      echo "* Restoring SABnzbd+ Data"
      sabnzbd__stop
      
      rm -rf "$sabnzbdData"
      sudo su -c -u $osUser \
        "tar xf $file --strip-components 1 -C $tretflixPath/appdata/ appdata/sabnzbdplus"
      
      if sabnzbd__version_check; then
        echo "* Upgrading SABnzbd+"
        sabnzbd__upgrade
      fi
      
      sabnzbd__start
    fi

    if [ "$plexserverAction" == "Restore" ]; then
      echo
      if ! echo "$(plexserver__get_status)" | grep -q "^Enabled"; then
        echo "* Enabling Plex Media Server"
        plexserver__enable
      fi
      echo "* Restoring Plex Media Server Data"
      plexserver__stop
      
      rm -rf "$plexserverData"
      sudo su -c -u $osUser \
        "tar xf $file --strip-components 1 -C $tretflixPath/appdata/ appdata/plexmediaserver"
      
      if plexserver__version_check; then
        echo "* Upgrading Plex Media Server"
        plexserver__upgrade
      fi
      
      plexserver__start
    fi
    

    if [ "$couchpotatoAction" == "Restore" ]; then
      echo
      if ! echo "$(couchpotato__get_status)" | grep -q "^Enabled"; then
        echo "* Enabling CouchPotato"
        couchpotato__enable
      fi
      echo "* Restoring CouchPotato Data"
      couchpotato__stop
      
      rm -rf "$couchpotatoData"
      sudo su -c -u $osUser \
        "tar xf $file --strip-components 1 -C $tretflixPath/appdata/ appdata/couchpotato"
      
      if couchpotato__version_check; then
        echo "* Upgrading CouchPotato"
        couchpotato__upgrade
      fi
      
      couchpotato__start
    fi    

    if [ "$headphonesAction" == "Restore" ]; then
      echo
      if ! echo "$(headphones__get_status)" | grep -q "^Enabled"; then
        echo "* Enabling Headphones"
        headphones__enable
      fi
      echo "* Restoring Headphones Data"
      headphones__stop
      
      rm -rf "$headphonesData"
      sudo su -c -u $osUser \
        "tar xf $file --strip-components 1 -C $tretflixPath/appdata/ appdata/headphones"
      
      if headphones__version_check; then
        echo "* Upgrading Headphones"
        headphones__upgrade
      fi
      
      headphones__start
    fi

    if [ "$nzbdroneAction" == "Restore" ]; then
      echo
      if ! echo "$(nzbdrone__get_status)" | grep -q "^Enabled"; then
        echo "* Enabling NzbDrone"
        nzbdrone__enable
      fi
      echo "* Restoring NzbDrone Data Data"
      nzbdrone__stop
      
      rm -rf "$nzbdroneData"
      sudo su -c -u $osUser \
        "tar xf $file --strip-components 1 -C $tretflixPath/appdata/ appdata/nzbdrone"
      
      if nzbdrone__version_check; then
        echo "* Upgrading NzbDrone"
        nzbdrone__upgrade
      fi
      
      nzbdrone__start
    fi

    if [ "$sickbeardAction" == "Restore" ]; then
      echo
      if ! echo "$(sickbeard__get_status)" | grep -q "^Enabled"; then
        echo "* Enabling Sick Beard"
        sickbeard__enable
      fi
      echo "* Restoring Sick Beard Data"
      sickbeard__stop
      
      rm -rf "$sickbeardData"
      sudo su -c -u $osUser \
        "tar xf $file --strip-components 1 -C $tretflixPath/appdata/ appdata/sickbeard"
      
      if sickbeard__version_check; then
        echo "* Upgrading Sick Beard"
        sickbeard__upgrade
      fi
      
      sickbeard__start
    fi

    if [ "$transmissionAction" == "Enable" ]; then
      echo
      if ! echo "$(transmission__get_status)" | grep -q "^Enabled"; then
        echo "* Enabling Transmission"
        transmission__enable
      fi
      echo "* Restoring Transmission Data"
      transmission__stop
      
      rm -rf "$transmissionData"
      sudo su -c -u $osUser \
        "tar xf $file --strip-components 1 -C $tretflixPath/appdata/ appdata/transmission-daemon"
      
      if transmission__version_check; then
        echo "* Upgrading Transmission"
        transmission__upgrade
      fi
      
      transmission__start
    fi

    echo    
    while true; do
      read -p "Do you want to see a config summary? (y/n): " input
      case "$input" in
        [yY] | [yY][Ee][Ss] )
          clear
          echo "  __                  __    _____ __   __        "
          echo "_/  |________   _____/  |__/ ____\  | |__|__  ___"
          echo "\   __\_  __ \_/ __ \   __\   __\|  | |  \  \/  /"
          echo " |  |  |  | \/\  ___/|  |  |  |  |  |_|  |>    < "
          echo " |__|  |__|    \_____/__|  |__|  |____/__/__/\__\\"
          echo
          echo    
          allservices__show_config
          break;;
        [nN] | [n|N][O|o] )
          break;;
        * )
          echo "!! ERROR: Invalid entry."
          echo
      esac
    done

    timestamp=$(date "+%Y%m%d%H%M%S")
    sudo su -c -u $osUser \
      "echo restore-appdata_$timestamp >> $restoreFlag"

  else
    config__help
  fi
}
