# avoid double inclusion
if test "${storage__imported+defined}" == "defined"; then
  return 0
fi
storage__imported=1

function storage__help() {
  echo "Usage: tretflix storage [COMMAND] [INPUT]"
  echo
  echo "COMMANDS:"
  echo "  tretflix storage set local"
  echo "  tretflix storage set share [PATH]"
  echo "  tretflix storage tmp cleanup"
  echo "  tretflix storage show config"
  echo
  echo "NOTES:"
  echo "  Existing files/dirs in the 'downloads' and 'tmp' directories"
  echo "  will be copied when changing the storage path. This may take"
  echo "  a while if there are large amounts of data to be copied and/or"
  echo "  depending on network speed, congestion, etc. Be patient and"
  echo "  monitor the output. Running the 'tmp cleanup' command will"
  echo "  purge any abandoned tmp files/dirs with a modified time of"
  echo "  greater than 14 days."
  echo
  exit 1
}

function storage__command_handler() {
  if test "${CLI_ARGS[2]+isset}"; then
    case "${CLI_ARGS[1]} ${CLI_ARGS[2]}" in
      'set local')
        if [ "${#CLI_ARGS[@]}" -eq 3 ]; then
          storage__set_local
        else
          storage__help
        fi
        ;;
      'set share')
        if [ "${#CLI_ARGS[@]}" -eq 4 ]; then
          storage__set_share "${CLI_ARGS[3]}"
        else
          storage__help
        fi
        ;;
      'tmp cleanup')
        if [ "${#CLI_ARGS[@]}" -eq 3 ]; then
          storage__tmp_cleanup
        else
          storage__help
        fi
        ;;
      'show config')
        if [ "${#CLI_ARGS[@]}" -eq 3 ]; then
          storage__show_config
        else
          storage__help
        fi
        ;;
      *)
        storage__help
    esac
  else
    storage__help
  fi
}

function storage__set_local() {
	newPath="$downloadsPath"

	# Exit if the "downloads" symlink is already pointed to /media/disk2/downloads
	currentDownloadsPath="$(readlink $downloadsLink)"
	if [ "$currentDownloadsPath" == "$newPath" ]; then
		echo "Downloads are already stored locally"
		echo
		exit 1
	fi
	
	# Get the size of the data to be synced to the new path
	downloadsSize=$(du -c "$downloadsLink/" | grep total | awk '{ print $1 }')
	syncSize=$downloadsSize

	# Get the space available at the new path
	newPathSpace=$(df -k "$newPath" | awk '{ print $4 }' | grep -v "Available")

	# Verify that the new path has enough space to copy the existing files	
	if [ "$syncSize" -ge "$newPathSpace" ]; then
		echo "Error: Insufficient space, cannot copy exisitng files"
		echo
		exit 1
	fi
	
	# Copy "Downloads" to the new path  
	sudo su -c -u $osUser \
		"shopt -s dotglob && \
		rsync -av --progress --human-readable $downloadsLink/* $newPath/ && \
		shopt -u dotglob"
		
	if [ $? -ne 0 ]; then
		echo "Error: Rsync exited with errors, review output."
	fi

	# Set the "Downloads" symlink to the new path
	ln -sfn $newPath $downloadsLink
	if [ $? -ne 0 ]; then
		echo "Error: Failed to update the symbolic link"
		echo
		exit 1
	fi
	
	echo
	storage__show_config
}

function storage__set_share() {
	newPath="$1"

	# Verify that the new path exists
	if [ "$(tools__path_istype $newPath)" != "Directory" ]; then
		echo "Error: The path provided does not exist or is not a directory"
		echo
		exit 1
	fi

	# Verify that the new path is a network share
	newPathType=$(df -T "$newPath" | tail -1 | awk '{print $2}')
	if ! echo $newPathType | egrep -q "cifs|nfs"; then
		echo "Error: The path provided is not on a CIFS or NFS share"
		echo
		exit 1
	fi

	# Verify Read/Write permissions in the new path
	sudo su -c -u $osUser \
		"test -w $newPath"
	if [ $? -ne 0 ]; then
		echo "Error: Permission denied, test write failed"
		echo
		exit 1
	fi
	
	# Get the "tmp" symlink's target path
	currentTmpPath="$(readlink $tmpLink)"
	# If the "tmp" symlink is still pointed to /media/disk2/tmp (old path) include it in the copy
	if [ "$currentTmpPath" != "$tmpPath" ]; then
		tmpAction=true
	else
		tmpAction=false
	fi 

	# Get the size of the data to be synced to the new path
	downloadsSize=$(du -c "$downloadsLink/" | grep total | awk '{ print $1 }')
	if $tmpAction; then
		tmpSize=$(du -c "$tmpLink/" | grep total | awk '{ print $1 }')
		syncSize=$(($downloadsSize+$tmpSize))
	else
		syncSize=$downloadsSize
	fi

	# Get the space available at the new path
	newPathSpace=$(df -k "$newPath" | awk '{ print $4 }' | grep -v "Available")

	# Verify that the new path has enough space to copy the existing files	
	if [ "$syncSize" -ge "$newPathSpace" ]; then
		echo "Error: Insufficient space, cannot copy exisitng files"
		echo
		exit 1
	fi
	
	# Copy "Downloads" to the new path  
	sudo su -c -u $osUser \
		"shopt -s dotglob && \
		rsync -av --progress --human-readable $downloadsLink/* $newPath/ && \
		shopt -u dotglob"
		
	if [ $? -ne 0 ]; then
		echo "Error: Rsync exited with errors, review output."
	fi

	# Set the "Downloads" symlink to the new path
	ln -sfn $newPath $downloadsLink
	if [ $? -ne 0 ]; then
		echo "Error: Failed to update the symbolic link"
		echo
		exit 1
	fi
	
	# Copy and Set "tmp" to "downloads/.tmp" if it isn't already
	if $tmpAction; then
		# Copy the existing tmp files to the new path/.tmp 
		sudo su -c -u $osUser \
			"shopt -s dotglob && \
			rsync -av --progress --human-readable $tmpLink/. $tmpPath && \
			shopt -u dotglob"
			
		if [ $? -ne 0 ]; then
			echo "Error: Rsync exited with errors, review output."
		fi
		
		# Change the symbolic link to point to the new path/.tmp
		ln -sfn $tmpPath $tmpLink
		if [ $? -ne 0 ]; then
			echo "Error: Failed to update the symbolic link"
			echo
			exit 1
		fi
	fi

	echo
	storage__show_config
}

function storage__tmp_cleanup() {
dirs=( \
"/opt/tretflix/tmp/plexmediaserver/transcodes" \
"/opt/tretflix/tmp/sabnzbdplus/couchpotato" \
"/opt/tretflix/tmp/sabnzbdplus/headphones" \
"/opt/tretflix/tmp/sabnzbdplus/incomplete" \
"/opt/tretflix/tmp/sabnzbdplus/nzbdrone" \
"/opt/tretflix/tmp/sabnzbdplus/sickbeard" \
"/opt/tretflix/tmp/transmission-daemon/incomplete")

for dir in "${dirs[@]}"; do
  find "$dir" -type f -mtime +14 | xargs rm -vf
done

for dir in "${dirs[@]}"; do
  find "$dir" -mindepth 1 -type d -empty | xargs rm -rvf
done
}

function storage__show_config() {
	path="$(readlink $downloadsLink)"
	size="$(df -h "$downloadsLink" | awk '{ print $2 }' | egrep -v "Size")"
	used="$(df -h "$downloadsLink" | awk '{ print $3 }' | egrep -v "Used")"
	avail="$(df -h "$downloadsLink" | awk '{ print $4 }' | egrep -v "Avail")"
	uPerc="$(df -h "$downloadsLink" | awk '{ print $5 }' | egrep -v "Use%")"

	printf "%-40s %-7s %-7s %-7s %-7s\n" "Storage Path" "Size" "Used" "Avail" "Use%"
	printf "%-40s %-7s %-7s %-7s %-7s\n" "$path" "$size" "$used" "$avail" "$uPerc"
}