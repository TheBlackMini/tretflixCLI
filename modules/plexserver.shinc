# avoid double inclusion
if test "${plexserver__imported+defined}" == "defined"; then
  return 0
fi
plexserver__imported=1


# Service Status & App Config Output
# ---------------------------------------------------------------------------------------

function plexserver__get_status() {
  if service plexmediaserver status 2>&1 | grep -q "unrecognized service"; then
    status="Not Installed"
  elif service plexmediaserver status 2>&1 | egrep -q "start|running"; then
    if ! ls -l /etc/init/plexmediaserver.override > /dev/null 2>&1; then
      status="Enabled|Running"
    else
      status="Disabled|Running"
    fi
  elif ! ls -l /etc/init/plexmediaserver.override > /dev/null 2>&1; then
    status="Enabled|Stopped"
  else
    status="Disabled|Stopped"
  fi
  echo "$status"
}

function plexserver__show_config() {
  status="$(plexserver__get_status)"

  echo "Plex Media Server Config:"
  echo "----------------------------"
  echo "Status: $status"
  if [ "$status" == "Enabled|Running" ]; then
    port="32400"
    ipv4=$(tools__get_ip)
    
    echo "Web UI: http://$ipv4:$port/web"
  fi
}


# Service Controls
# ---------------------------------------------------------------------------------------

function plexserver__enable() {
  if echo "$(plexserver__get_status)" | grep -q "^Disabled"; then
    echo "* Enabling Plex Media Server"
    rm -v /etc/init/plexmediaserver.override
  fi
}

function plexserver__disable() {
  if echo "$(plexserver__get_status)" | grep -q "^Enabled"; then
    echo "* Disabling Plex Media Server"
    plexserver__stop
    tar xf $configBundle --strip-components 2 -C /etc/init/ config/init/plexmediaserver.override
    echo "added \`/etc/init/plexmediaserver.override'"
  fi
}

function plexserver__start() {
  if echo "$(plexserver__get_status)" | grep -q "^Enabled"; then
    for i in {1..3}; do
      if [ $i -gt 1 ]; then
        sleep 5
      fi
      if [ "$(plexserver__get_status)" != "Enabled|Running" ]; then
        service plexmediaserver start
      else
        break
      fi
    done
  fi
}

function plexserver__stop() {
  for i in {1..3}; do
    if [ $i -gt 1 ]; then
      sleep 5
    fi
    if echo "$(plexserver__get_status)" | grep -q "Running$"; then
      service plexmediaserver stop
    else
      break
    fi
  done
}


# Install, Configure & Upgrade
# ---------------------------------------------------------------------------------------

function plexserver__install() {
  echo "* Installing Plex Media Server"
  
  # Install Dependencies
  #### Not Needed, gdebi handles this

  releaseList=$(curl http://tretflix.com/misc/currentPlexReleases.txt 2> /dev/null)
  if uname -a | grep -q "i386"; then
    url=$(echo "$releaseList" | grep "i386.deb")
  else
    url=$(echo "$releaseList" | grep "amd64.deb")
  fi

  wget -O /tmp/"$filename" "$url"
  if [ $? -ne 0 ]; then
    echo "Download failed"
    echo
    exit 1
  fi

  gdebi --n /tmp/"$filename"
  if [ $? -ne 0 ]; then
    echo "Installation failed"
    echo
    exit 1
  fi
    
  rm -vf /tmp/"$filename"
  
  # Stop and Disable, gdebi sometimes automatically enables and starts apps
  plexserver__stop
  plexserver__disable
  
  # Copy/Replace the init file
  tar xf $configBundle --strip-components 2 -C /etc/init/ config/init/plexmediaserver.conf

  # Copy the config/data directory into appdata
  if [ ! -d "$plexserverData" ]; then
    sudo su -c -u $osUser \
      "tar xf $appdataBundle --strip-components 1 -C $tretflixPath/appdata/ appdata/plexmediaserver"
  fi
}

function plexserver__upgrade() {
  plexserver__stop
  
  echo "* Upgrading Plex Media Server"
  
  releaseList=$(curl http://tretflix.com/misc/currentPlexReleases.txt 2> /dev/null)
  if uname -a | grep -q "i386"; then
    url=$(echo "$releaseList" | grep "i386.deb")
  else
    url=$(echo "$releaseList" | grep "amd64.deb")
  fi

  wget -O /tmp/"$filename" "$url"
  if [ $? -ne 0 ]; then
    echo "Download failed"
    echo
    exit 1
  fi

  gdebi --n /tmp/"$filename"
  if [ $? -ne 0 ]; then
    echo "Installation failed"
    echo
    exit 1
  fi
    
  rm -vf /tmp/"$filename"
}

function plexserver__version_check() {
  releaseList=$(curl http://tretflix.com/misc/currentPlexReleases.txt 2> /dev/null)
  if uname -a | grep -q "i386"; then
    url=$(echo "$releaseList" | grep "i386.deb")
  else
    url=$(echo "$releaseList" | grep "amd64.deb")
  fi
  
  # Extract the installer filename from the URL
  filename=$(basename "$url")
  
  # Get the installed & candidate versions
  output=$(apt-cache policy plexmediaserver 2>&1)
  installedVers=$(echo "$output" | grep "Installed:" | awk '{ print $2 }')
  candidateVers=$(echo "$filename" | sed 's/^[a-z]*_//g' | sed 's/_.*$//g')
  
  if awk "BEGIN {exit !($candidateVers <= $installedVers)}"; then
    echo "Plex Media Server is up-to-date"
    false
  else
    true
  fi
}


# Misc, Extras
# ---------------------------------------------------------------------------------------

function plexserver__fixit() {
  echo "Coming Soon..."
}