# avoid double inclusion
if test "${config__imported+defined}" == "defined"; then
  return 0
fi
config__imported=1

function config__help() {
  echo "Usage: tretflix config [COMMAND] [OPTION]"
  echo
  echo "COMMANDS:"
  echo "  tretflix config wizard"
  echo "  tretflix config backup appdata"
  echo "  tretflix config restore appdata [OPTION] ..."
  echo
  echo "OPTIONS:"
  echo "  -l, --list"
  echo "  -f, --file [FILE]"
  echo
  echo "NOTES:" 
  echo "  Backups will be saved in /opt/tretflix. When restoring a" 
  echo "  backup, provide the tar archive filename or the full path"
  echo "  to the tar file if it's not in /opt/tretflix."
  echo
  exit 1
}

function config__command_handler() {
  if test "${CLI_ARGS[2]+isset}"; then
    case "${CLI_ARGS[1]} ${CLI_ARGS[2]}" in
      'backup appdata')
        if [ "${#CLI_ARGS[@]}" -eq 3 ]; then
          config__backup_appdata
        else
          config__help
        fi    
        ;;
      'restore appdata')
				if [ "${#CLI_ARGS[@]}" -eq 4 ]; then
					case "${CLI_ARGS[3]}" in
						'-l' | '--list')
							config__list_backups
							;;
						*)
							config__help
					esac
				elif [ "${#CLI_ARGS[@]}" -eq 5 ]; then
					case "${CLI_ARGS[3]}" in
						'-f' | '--file')
              config__restore_appdata "${CLI_ARGS[4]}"
							;;
						*)
							config__help
					esac
        else
          config__help
        fi
        ;;
      *)
        config__help
    esac    
  elif test "${CLI_ARGS[1]+isset}"; then
    case "${CLI_ARGS[1]}" in
      wizard)
        if [ "${#CLI_ARGS[@]}" -eq 2 ]; then
          config__wizard
        else
          config__help
        fi        
        ;;
      *)
        config__help
    esac
  else
    config__help
  fi
}

function config__wizard() {
	# If the system has not been configured or restored yet, prompt the user first
	if [ ! -f $configFlag -a ! -f $restoreFlag ]; then
		while true; do
			read -p "Do you want to run the config wizard? (y/n): " input
			case "$input" in
				[yY] | [yY][Ee][Ss] )
					break;;
				[nN] | [n|N][O|o] )
					return;;
				* )
					echo "!! ERROR: Invalid entry."
					echo
			esac      
		done    
	fi

	clear
	echo "  __                  __    _____ __   __        "
	echo "_/  |________   _____/  |__/ ____\  | |__|__  ___"
	echo "\   __\_  __ \_/ __ \   __\   __\|  | |  \  \/  /"
	echo " |  |  |  | \/\  ___/|  |  |  |  |  |_|  |>    < "
	echo " |__|  |__|    \_____/__|  |__|  |____/__/__/\__\\"
	echo
	echo
	while true; do
		read -p "Do you want to use CouchPotato? (y/n): " input
		case "$input" in
			[yY] | [yY][Ee][Ss] )
				couchpotatoAction="Enable"
				read -p "Enter a username for the CouchPotato Web UI [Default: admin]: " input
				if [[ -z "${input}" ]]; then
					couchpotatoUser="admin"
				else
					couchpotatoUser="$input"
				fi
				read -p "Enter a password for the CouchPotato Web UI [Default: admin]: " input
				if [[ -z "${input}" ]]; then
					couchpotatoPass="admin"
				else
					couchpotatoPass="$input"
				fi
				read -p "Enter a port number for the CouchPotato Web UI [Default: 5050]: " input
				if [[ -z "${input}" ]]; then
					couchpotatoPort="5050"
				else
					couchpotatoPort="$input"
				fi
				couchpotatoAPIkey="$(tools__gen_apikey)"
				echo "New CouchPotato API key randomly generated for increased security."
				break;;
			[nN] | [n|N][O|o] )
				couchpotatoAction="Disable"
				break;;
			* )
				echo "!! ERROR: Invalid entry."
				echo
		esac      
	done

	echo
	while true; do
		read -p "Do you want to use Headphones? (y/n): " input
		case "$input" in
			[yY] | [yY][Ee][Ss] )
				headphonesAction="Enable"
				read -p "Enter a username for the Headphones Web UI [Default: admin]: " input
				if [[ -z "${input}" ]]; then
					headphonesUser="admin"
				else
					headphonesUser="$input"
				fi
				read -p "Enter a password for the Headphones Web UI [Default: admin]: " input
				if [[ -z "${input}" ]]; then
					headphonesPass="admin"
				else
					headphonesPass="$input"
				fi
				read -p "Enter a port number for the Headphones Web UI [Default: 8181]: " input
				if [[ -z "${input}" ]]; then
					headphonesPort="8181"
				else
					headphonesPort="$input"
				fi
				headphonesAPIkey="$(tools__gen_apikey)"
				echo "New Headphones API key randomly generated for increased security."
				break;;
			[nN] | [n|N][O|o] )
				headphonesAction="Disable"
				break;;
			* )
				echo "!! ERROR: Invalid entry."
				echo
		esac      
	done  
	
	echo
	while true; do
		read -p "Do you want to use NzbDrone? (y/n): " input
		case "$input" in
			[yY] | [yY][Ee][Ss] )
				nzbdroneAction="Enable"
				read -p "Enter a username for the NzbDrone Web UI [Default: admin]: " input
				if [[ -z "${input}" ]]; then
					nzbdroneUser="admin"
				else
					nzbdroneUser="$input"
				fi
				read -p "Enter a password for the NzbDrone Web UI [Default: admin]: " input
				if [[ -z "${input}" ]]; then
					nzbdronePass="admin"
				else
					nzbdronePass="$input"
				fi
				read -p "Enter a port number for the NzbDrone Web UI [Default: 8989]: " input
				if [[ -z "${input}" ]]; then
					nzbdronePort="8989"
				else
					nzbdronePort="$input"
				fi
				nzbdroneAPIkey="$(tools__gen_apikey)"
				echo "New NzbDrone API key randomly generated for increased security."
				break;;
			[nN] | [n|N][O|o] )
				nzbdroneAction="Disable"
				break;;
			* )
				echo "!! ERROR: Invalid entry."
				echo
		esac      
	done   
		
	echo
	while true; do
		read -p "Do you want to use Plex Media Server? (y/n): " input
		case "$input" in
			[yY] | [yY][Ee][Ss] )
				plexserverAction="Enable"
				plexserverPort="32400"
				break;;
			[nN] | [n|N][O|o] )
				plexserverAction="Disable"
				break;;
			* )
				echo "!! ERROR: Invalid entry."
				echo
		esac      
	done  

	echo
	while true; do
		read -p "Do you want to use SABnzbd+? (y/n): " input
		case "$input" in
			[yY] | [yY][Ee][Ss] )
				sabnzbdAction="Enable"
				read -p "Enter a username for the SABnbzd+ Web UI [Default: admin]: " input
				if [[ -z "${input}" ]]; then
					sabnzbdUser="admin"
				else
					sabnzbdUser="$input"
				fi
				read -p "Enter a password for the SABnbzd+ Web UI [Default: admin]: " input
				if [[ -z "${input}" ]]; then
					sabnzbdPass="admin"
				else
					sabnzbdPass="$input"
				fi
				read -p "Enter a port number for the SABnbzd+ Web UI [Default: 8080]: " input
				if [[ -z "${input}" ]]; then
					sabnzbdPort="8080"
				else
					sabnzbdPort="$input"
				fi
				sabnzbdAPIkey="$(tools__gen_apikey)"
				echo "New SABnzbd+ API key randomly generated for increased security."
				break;;
			[nN] | [n|N][O|o] )
				sabnzbdAction="Disable"
				break;;
			* )
				echo "!! ERROR: Invalid entry."
				echo
		esac      
	done

	echo
	while true; do
		read -p "Do you want to use Sick Beard? (y/n): " input
		case "$input" in
			[yY] | [yY][Ee][Ss] )
				sickbeardAction="Enable"
				read -p "Enter a username for the Sick Beard Web UI [Default: admin]: " input
				if [[ -z "${input}" ]]; then
					sickbeardUser="admin"
				else
					sickbeardUser="$input"
				fi
				read -p "Enter a password for the Sick Beard Web UI [Default: admin]: " input
				if [[ -z "${input}" ]]; then
					sickbeardPass="admin"
				else
					sickbeardPass="$input"
				fi
				read -p "Enter a port number for the Sick Beard Web UI [Default: 8081]: " input
				if [[ -z "${input}" ]]; then
					sickbeardPort="8081"
				else
					sickbeardPort="$input"
				fi
				sickbeardAPIkey="$(tools__gen_apikey)"
				echo "New Sick Beard API key randomly generated for increased security."
				break;;
			[nN] | [n|N][O|o] )
				sickbeardAction="Disable"
				break;;
			* )
				echo "!! ERROR: Invalid entry."
				echo
		esac      
	done

	echo
	while true; do
		read -p "Do you want to use Transmission? (y/n): " input
		case "$input" in
			[yY] | [yY][Ee][Ss] )
				transmissionAction="Enable"
				read -p "Enter a username for the Transmission Web UI [Default: admin]: " input
				if [[ -z "${input}" ]]; then
					transmissionUser="admin"
				else
					transmissionUser="$input"
				fi
				read -p "Enter a password for the Transmission Web UI [Default: admin]: " input
				if [[ -z "${input}" ]]; then
					transmissionPass="admin"
				else
					transmissionPass="$input"
				fi
				read -p "Enter a port number for the Transmission Web UI [Default: 9091]: " input
				if [[ -z "${input}" ]]; then
					transmissionPort="9091"
				else
					transmissionPort="$input"
				fi
				break;;
			[nN] | [n|N][O|o] )
				transmissionAction="Disable"
				break;;
			* )
				echo "!! ERROR: Invalid entry."
				echo
		esac      
	done
	
	echo
	while true; do
		read -p "Do you want to use the Reverse Proxy service? (y/n): " input
		case "$input" in
			[yY] | [yY][Ee][Ss] )
				proxyAction="Enable"
				break;;
			[nN] | [n|N][O|o] )
				proxyAction="Disable"
				break;;
			* )
				echo "!! ERROR: Invalid entry."
				echo
		esac      
	done
	
	echo	
	while true; do
		read -p "Apply these changes? (y/n): " input
		case "$input" in
			[yY] | [yY][Ee][Ss] )
				break;;
			[nN] | [n|N][O|o] )
			  echo
				exit;;
			* )
				echo "!! ERROR: Invalid entry."
				echo
		esac
	done

	clear
	echo "  __                  __    _____ __   __        "
	echo "_/  |________   _____/  |__/ ____\  | |__|__  ___"
	echo "\   __\_  __ \_/ __ \   __\   __\|  | |  \  \/  /"
	echo " |  |  |  | \/\  ___/|  |  |  |  |  |_|  |>    < "
	echo " |__|  |__|    \_____/__|  |__|  |____/__/__/\__\\"
	echo
	echo
	# Update apt package lists (necessary for version checking & upgrading)
	echo "* Updating apt repository package lists"
	apt-get update
	

	# CouchPotato Section
	if [ "$couchpotatoAction" == "Enable" ]; then
		if ! echo "$(couchpotato__get_status)" | grep -q "^Enabled"; then
			# Install the app if not already installed
			if [ "$(couchpotato__get_status)" == "Not Installed" ]; then
				couchpotato__install
			fi
			
			# Enable the app
			couchpotato__enable
		else
			if couchpotato__version_check; then
				# Upgrade the app if a newer version is available
				couchpotato__upgrade
			fi
		fi
		
		# Configure the app using user input
		echo "* Configuring CouchPotato"
		couchpotato__set_username "$couchpotatoUser"
		couchpotato__set_password "$couchpotatoPass"
		couchpotato__set_port "$couchpotatoPort"
		couchpotato__set_apikey "$couchpotatoAPIkey"


    if [ "$sabnzbdAction" == "Enable" ]; then
      couchpotato__config_sabnzbd "$sabnzbdPort" "$sabnzbdAPIkey"
    fi
    if [ "$plexserverAction" == "Enable" ]; then
      couchpotato__config_plexserver
    fi
    if [ "$proxyAction" == "Enable" ]; then
      couchpotato__config_proxy
    fi

		# Start the app
		couchpotato__start
	else
		# Stop and disable the app if not already disabled
		if echo "$(couchpotato__get_status)" | grep -q "^Enabled"; then
			couchpotato__disable
		fi
	fi


	# Headphones Section
	if [ "$headphonesAction" == "Enable" ]; then
		if ! echo "$(headphones__get_status)" | grep -q "^Enabled"; then
			# Install the app if not already installed
			if [ "$(headphones__get_status)" == "Not Installed" ]; then
				headphones__install
			fi
			
			# Enable the app
			headphones__enable
		else
			if headphones__version_check; then
				# Upgrade the app if a newer version is available
				headphones__upgrade
			fi
		fi
		
		# Configure the app using user input
		echo "* Configuring Headphones"
		headphones__set_username "$headphonesUser"
		headphones__set_password "$headphonesPass"
		headphones__set_port "$headphonesPort"
		headphones__set_apikey "$headphonesAPIkey"


    if [ "$sabnzbdAction" == "Enable" ]; then
      headphones__config_sabnzbd "$sabnzbdPort" "$sabnzbdAPIkey" "$sabnzbdUser" "$sabnzbdPass"
    fi
    if [ "$proxyAction" == "Enable" ]; then
      headphones__config_proxy
    fi

		# Start the app
		headphones__start
	else
		# Stop and disable the app if not already disabled
		if echo "$(headphones__get_status)" | grep -q "^Enabled"; then
			headphones__disable
		fi
	fi


	# NzbDrone Section
	if [ "$nzbdroneAction" == "Enable" ]; then
		if ! echo "$(nzbdrone__get_status)" | grep -q "^Enabled"; then
			# Install the app if not already installed
			if [ "$(nzbdrone__get_status)" == "Not Installed" ]; then
				nzbdrone__install
			fi
			
			# Enable the app
			nzbdrone__enable
		else
			if nzbdrone__version_check; then
				# Upgrade the app if a newer version is available
				nzbdrone__upgrade
			fi
		fi
		
		# Configure the app using user input
		echo "* Configuring NzbDrone"
		nzbdrone__set_username "$nzbdroneUser"
		nzbdrone__set_password "$nzbdronePass"
		nzbdrone__set_port "$nzbdronePort"
		nzbdrone__set_apikey "$nzbdroneAPIkey"
		

    if [ "$sabnzbdAction" == "Enable" ]; then
      nzbdrone__config_sabnzbd "$sabnzbdPort" "$sabnzbdAPIkey" "$sabnzbdUser" "$sabnzbdPass"
    fi
    if [ "$plexserverAction" == "Enable" ]; then
      nzbdrone__config_plexserver
    fi
    if [ "$proxyAction" == "Enable" ]; then
      nzbdrone__config_proxy
    fi

		# Start the app
		nzbdrone__start
	else
		# Stop and disable the app if not already disabled
		if echo "$(nzbdrone__get_status)" | grep -q "^Enabled"; then
			nzbdrone__disable
		fi
	fi
	

	# Plex Media Server Section
	if [ "$plexserverAction" == "Enable" ]; then
		if ! echo "$(plexserver__get_status)" | grep -q "^Enabled"; then
			# Install the app if not already installed
			if [ "$(plexserver__get_status)" == "Not Installed" ]; then
				plexserver__install
			fi
			
			# Enable the app
			plexserver__enable
		else
			if plexserver__version_check; then
				# Upgrade the app if a newer version is available
				plexserver__upgrade
			fi
		fi

		# Start the app
		plexserver__start
	else
		# Stop and disable the app if not already disabled
		if echo "$(plexserver__get_status)" | grep -q "^Enabled"; then
			plexserver__disable
		fi
	fi


	# SABnzbd+ Section
	if [ "$sabnzbdAction" == "Enable" ]; then
		if ! echo "$(sabnzbd__get_status)" | grep -q "^Enabled"; then
			# Install the app if not already installed
			if [ "$(sabnzbd__get_status)" == "Not Installed" ]; then
				sabnzbd__install
			fi

			# Enable the app
			sabnzbd__enable
		else
      if sabnzbd__version_check; then
				# Upgrade the app if a newer version is available
				sabnzbd__upgrade
		  fi
		fi

		# Configure the app using user input
		echo "* Configuring SABnzbd+"
		sabnzbd__set_username "$sabnzbdUser"
		sabnzbd__set_password "$sabnzbdPass"
		sabnzbd__set_port "$sabnzbdPort"
		sabnzbd__set_apikey "$sabnzbdAPIkey"

		
    if [ "$couchpotatoAction" == "Enable" ]; then
      sabnzbd__config_couchpotato
    fi
    if [ "$headphonesAction" == "Enable" ]; then
      sabnzbd__config_headphones
    fi
    if [ "$nzbdroneAction" == "Enable" ]; then
      sabnzbd__config_nzbdrone
    fi
    if [ "$sickbeardAction" == "Enable" ]; then
      sabnzbd__config_sickbeard
    fi

		# Start the app
		sabnzbd__start
	else
		# Stop and disable the app if not already disabled
		if echo "$(sabnzbd__get_status)" | grep -q "^Enabled"; then
			sabnzbd__disable
		fi
	fi
	
	
	# Sick Beard Section
	if [ "$sickbeardAction" == "Enable" ]; then
		if ! echo "$(sickbeard__get_status)" | grep -q "^Enabled"; then
			# Install the app if not already installed
			if [ "$(sickbeard__get_status)" == "Not Installed" ]; then
				sickbeard__install
			fi
			
			# Enable the app
			sickbeard__enable
		else
			if sickbeard__version_check; then
				# Upgrade the app if a newer version is available
				sickbeard__upgrade
			fi
		fi
		
		# Configure the app using user input
		echo "* Configuring Sick Beard"
		sickbeard__set_username "$sickbeardUser"
		sickbeard__set_password "$sickbeardPass"
		sickbeard__set_port "$sickbeardPort"
		sickbeard__set_apikey "$sickbeardAPIkey"
		

    if [ "$sabnzbdAction" == "Enable" ]; then
      sickbeard__config_sabnzbd "$sabnzbdPort" "$sabnzbdAPIkey" "$sabnzbdUser" "$sabnzbdPass"
    fi
    if [ "$plexserverAction" == "Enable" ]; then
      sickbeard__config_plexserver
    fi
    if [ "$proxyAction" == "Enable" ]; then
      sickbeard__config_proxy
    fi

		# Start the app
		sickbeard__start
	else
		# Stop and disable the app if not already disabled
		if echo "$(sickbeard__get_status)" | grep -q "^Enabled"; then
			sickbeard__disable
		fi
	fi
	
	
	# Transmission Section
	if [ "$transmissionAction" == "Enable" ]; then
		if ! echo "$(transmission__get_status)" | grep -q "^Enabled"; then
			# Install the app if not already installed
			if [ "$(transmission__get_status)" == "Not Installed" ]; then
				transmission__install
			fi
			
			# Enable the app
			transmission__enable
		else
			if transmission__version_check; then
				# Upgrade the app if a newer version is available
				transmission__stop
				transmission__upgrade
			fi
		fi
		
		# Configure the app using user input
		echo "* Configuring Transmission"
		transmission__set_username "$transmissionUser"
		transmission__set_password "$transmissionPass"
		transmission__set_port "$transmissionPort"

		# Start the app
		transmission__start
	else
		# Stop and disable the app if not already disabled
		if echo "$(transmission__get_status)" | grep -q "^Enabled"; then
			transmission__disable
		fi
	fi


  # Reverse Proxy Section
	if [ "$proxyAction" == "Enable" ]; then
		if ! echo "$(proxy__get_status)" | grep -q "^Enabled"; then
			# Install the service if not already installed
			if [ "$(proxy__get_status)" == "Not Installed" ]; then
				proxy__install
			fi

			# Enable the service
			proxy__enable
		fi

		# Sync w/ current port settings
		echo "* Configuring the Reverse Proxy"

    if [ "$couchpotatoAction" == "Enable" ]; then
      proxy__config_couchpotato "$couchpotatoPort"
    fi
    if [ "$headphonesAction" == "Enable" ]; then
      proxy__config_headphones "$headphonesPort"
    fi
    if [ "$nzbdroneAction" == "Enable" ]; then
      proxy__config_nzbdrone "$nzbdronePort"
    fi
    if [ "$sabnzbdAction" == "Enable" ]; then
      proxy__config_sabnzbd "$sabnzbdPort"
    fi
    if [ "$sickbeardAction" == "Enable" ]; then
      proxy__config_sickbeard "$sickbeardPort"
    fi
    if [ "$transmissionAction" == "Enable" ]; then
      proxy__config_transmission "$transmissionPort"
    fi
		
		# Start the service
		proxy__start
	else
		# Stop and disable the service if not already disabled
		if echo "$(proxy__get_status)" | grep -q "^Enabled"; then
			proxy__disable
		fi
	fi


	echo    
	while true; do
		read -p "Do you want to see a config summary? (y/n): " input
		case "$input" in
			[yY] | [yY][Ee][Ss] )
				clear
				echo "  __                  __    _____ __   __        "
				echo "_/  |________   _____/  |__/ ____\  | |__|__  ___"
				echo "\   __\_  __ \_/ __ \   __\   __\|  | |  \  \/  /"
				echo " |  |  |  | \/\  ___/|  |  |  |  |  |_|  |>    < "
				echo " |__|  |__|    \_____/__|  |__|  |____/__/__/\__\\"
				echo
				echo    
				apps__show_config "--all"
				break;;
			[nN] | [n|N][O|o] )
			  echo
				break;;
			* )
				echo "!! ERROR: Invalid entry."
				echo
		esac
	done
	
	timestamp=$(date "+%Y%m%d%H%M%S")
	sudo su -c -u $osUser \
		"echo config-wizard_$timestamp >> $configFlag"
}

function config__backup_appdata() {
	echo "* Stopping Services"
  couchpotato__stop
  headphones__stop
  nzbdrone__stop
  plexserver__start
  sabnzbd__stop
  sickbeard__stop
  transmission__stop
	
	echo "* Creating Backup Archive"
	
	timestamp=$(date "+%Y%m%d%H%M%S")
	sudo su -c -u $osUser \
		"cd $tretflixPath && tar cvf backup-$timestamp.tar appdata/"
	
	echo "* Restarting Services"
  couchpotato__start
  headphones__start
  nzbdrone__start
  plexserver__start
  sabnzbd__start
  sickbeard__start
  transmission__start
	
	echo
	echo "Backup Saved to $tretflixPath/backup-$timestamp.tar"
}

function config__list_backups() {
  ls "$tretflixPath" | grep --color="none" "backup-.*tar" 2> /dev/null
}

function config__restore_appdata() {
  file="$1"
    
	if [ "$(tools__path_istype $file)" == "File" ]; then
		file="$(realpath $file)"
	elif [ "$(tools__path_istype $tretflixPath/$file)" == "File" ]; then
		file="$(realpath $tretflixPath/$file)"
	else
		echo "The specified file cannot be found"
		echo
		exit 1
	fi
	
	echo "* Stopping Services"
  couchpotato__stop
  headphones__stop
  nzbdrone__stop
  plexserver__stop
  sabnzbd__stop
  sickbeard__stop
  transmission__stop
  
	
	echo "* Creating Backup Archive"
	
	timestamp=$(date "+%Y%m%d%H%M%S")
	sudo su -c -u $osUser \
		"cd $tretflixPath && tar cvf backup-$timestamp.tar appdata/"
			
	clear
	echo "  __                  __    _____ __   __        "
	echo "_/  |________   _____/  |__/ ____\  | |__|__  ___"
	echo "\   __\_  __ \_/ __ \   __\   __\|  | |  \  \/  /"
	echo " |  |  |  | \/\  ___/|  |  |  |  |  |_|  |>    < "
	echo " |__|  |__|    \_____/__|  |__|  |____/__/__/\__\\"
	echo
	echo
	if tar -tf "$file" | grep -q "^appdata/couchpotato/$"; then
		while true; do
			read -p "Do you want to restore and use CouchPotato? (y/n): " input
			case "$input" in
				[yY] | [yY][Ee][Ss] )
					couchpotatoAction="Restore"
					break;;
				[nN] | [n|N][O|o] )
					couchpotatoAction="None"   
					break;;
				* )
					echo "!! ERROR: Invalid entry."
					echo
			esac      
		done
	fi

	if tar -tf "$file" | grep -q "^appdata/headphones/$"; then
		while true; do
			read -p "Do you want to restore and use Headphones? (y/n): " input
			case "$input" in
				[yY] | [yY][Ee][Ss] )
					headphonesAction="Restore"
					break;;
				[nN] | [n|N][O|o] )
					headphonesAction="None"   
					break;;
				* )
					echo "!! ERROR: Invalid entry."
					echo
			esac      
		done
	fi
	
	if tar -tf "$file" | grep -q "^appdata/nzbdrone/$"; then
		while true; do
			read -p "Do you want to restore and use NzbDrone? (y/n): " input
			case "$input" in
				[yY] | [yY][Ee][Ss] )
					nzbdroneAction="Restore"
					break;;
				[nN] | [n|N][O|o] )
					nzbdroneAction="None"   
					break;;
				* )
					echo "!! ERROR: Invalid entry."
					echo
			esac      
		done
	fi

	if tar -tf "$file" | grep -q "^appdata/plexmediaserver/$"; then
		while true; do
			read -p "Do you want to restore and use Plex Media Server? (y/n): " input
			case "$input" in
				[yY] | [yY][Ee][Ss] )
					plexserverAction="Restore"
					break;;
				[nN] | [n|N][O|o] )
					plexserverAction="None"   
					break;;
				* )
					echo "!! ERROR: Invalid entry."
					echo
			esac      
		done
	fi
	
	if tar -tf "$file" | grep -q "^appdata/sabnzbdplus/$"; then
		while true; do
			read -p "Do you want to restore and use SABnzbd+? (y/n): " input
			case "$input" in
				[yY] | [yY][Ee][Ss] )
					sabnzbdAction="Restore"
					break;;
				[nN] | [n|N][O|o] )
					sabnzbdAction="None"   
					break;;
				* )
					echo "!! ERROR: Invalid entry."
					echo
			esac      
		done
	fi

	if tar -tf "$file" | grep -q "^appdata/sickbeard/$"; then
		while true; do
			read -p "Do you want to restore and use Sick Beard? (y/n): " input
			case "$input" in
				[yY] | [yY][Ee][Ss] )
					sickbeardAction="Restore"
					break;;
				[nN] | [n|N][O|o] )
					sickbeardAction="None"   
					break;;
				* )
					echo "!! ERROR: Invalid entry."
					echo
			esac      
		done
	fi
	
	if tar -tf "$file" | grep -q "^appdata/transmission-daemon/$"; then
		while true; do
			read -p "Do you want to restore and use Transmission? (y/n): " input
			case "$input" in
				[yY] | [yY][Ee][Ss] )
					transmissionAction="Restore"
					break;;
				[nN] | [n|N][O|o] )
					transmissionAction="None"   
					break;;
				* )
					echo "!! ERROR: Invalid entry."
					echo
			esac      
		done
	fi

	echo
	while true; do
		read -p "Do you want to use the Reverse Proxy service? (y/n): " input
		case "$input" in
			[yY] | [yY][Ee][Ss] )
				proxyAction="Enable"
				break;;
			[nN] | [n|N][O|o] )
				proxyAction="Disable"
				break;;
			* )
				echo "!! ERROR: Invalid entry."
				echo
		esac      
	done

	echo	
	while true; do
		read -p "Apply these changes? (y/n): " input
		case "$input" in
			[yY] | [yY][Ee][Ss] )
				break;;
			[nN] | [n|N][O|o] )
			  echo
				exit;;
			* )
				echo "!! ERROR: Invalid entry."
				echo
		esac
	done

	clear
	echo "  __                  __    _____ __   __        "
	echo "_/  |________   _____/  |__/ ____\  | |__|__  ___"
	echo "\   __\_  __ \_/ __ \   __\   __\|  | |  \  \/  /"
	echo " |  |  |  | \/\  ___/|  |  |  |  |  |_|  |>    < "
	echo " |__|  |__|    \_____/__|  |__|  |____/__/__/\__\\"
	echo
	echo
	# Upgrade all apps, prevents newer appdata w/ old app builds issue
	echo "* Updating apt repository package lists"
	apt-get update


	if [ "$couchpotatoAction" == "Restore" ]; then
		# Stop the service
		couchpotato__stop

		# Restore CouchPotato appdata from backup
		echo "* Restoring CouchPotato Data"
		rm -rf "$couchpotatoData"
		sudo su -c -u $osUser \
			"tar xf $file --strip-components 1 -C $tretflixPath/appdata/ appdata/couchpotato"  
			
		couchpotatoAction="Enable"
	elif echo "$(couchpotato__get_status)" | grep -q "^Enabled"; then
	  # Flag to sync current config w/ the apps being restored
	  couchpotatoAction="Enable"
	fi
	
	if [ "$headphonesAction" == "Restore" ]; then
		# Stop the service
		headphones__stop
		
		# Restore Headphones appdata from backup
		echo "* Restoring Headphones Data"
		rm -rf "$headphonesData"
		sudo su -c -u $osUser \
			"tar xf $file --strip-components 1 -C $tretflixPath/appdata/ appdata/headphones"
			
		headphonesAction="Enable"
	elif echo "$(headphones__get_status)" | grep -q "^Enabled"; then
	  # Flag to sync current config w/ the apps being restored
	  headphonesAction="Enable"
	fi
	
	if [ "$nzbdroneAction" == "Restore" ]; then
		# Stop the service
		nzbdrone__stop
		
		# Restore Headphones appdata from backup
		echo "* Restoring NzbDrone Data"
		rm -rf "$nzbdroneData"
		sudo su -c -u $osUser \
			"tar xf $file --strip-components 1 -C $tretflixPath/appdata/ appdata/nzbdrone"	
			
		nzbdroneAction="Enable"
	elif echo "$(nzbdrone__get_status)" | grep -q "^Enabled"; then
	  # Flag to sync current config w/ the apps being restored
	  nzbdroneAction="Enable"
	fi
	
	if [ "$plexserverAction" == "Restore" ]; then
		# Stop the service
		plexserver__stop

		# Restore Plex Media Server appdata from backup
		echo "* Restoring Plex Media Server Data"   
		rm -rf "$plexserverData"
		sudo su -c -u $osUser \
			"tar xf $file --strip-components 1 -C $tretflixPath/appdata/ appdata/plexmediaserver"	
		
		plexserverAction="Enable"
	elif echo "$(plexserver__get_status)" | grep -q "^Enabled"; then
	  # Flag to sync current config w/ the apps being restored
	  plexserverAction="Enable"
	fi
	
	if [ "$sabnzbdAction" == "Restore" ]; then
		# Stop the service
		sabnzbd__stop
		
		# Restore SABnzbd+ appdata from backup
		echo "* Restoring SABnzbd+ Data"
		rm -rf "$sabnzbdData"
		sudo su -c -u $osUser \
			"tar xf $file --strip-components 1 -C $tretflixPath/appdata/ appdata/sabnzbdplus"	
			
		sabnzbdAction="Enable"
	elif echo "$(sabnzbd__get_status)" | grep -q "^Enabled"; then
	  # Flag to sync current config w/ the apps being restored
	  sabnzbdAction="Enable"
	fi
	
	if [ "$sickbeardAction" == "Restore" ]; then
		# Stop the service
		sickbeard__stop

		# Restore Sick Beard appdata from backup
		echo "* Restoring Sick Beard Data"
		rm -rf "$sickbeardData"
		sudo su -c -u $osUser \
			"tar xf $file --strip-components 1 -C $tretflixPath/appdata/ appdata/sickbeard"	
			
		sickbeardAction="Enable"
	elif echo "$(sickbeard__get_status)" | grep -q "^Enabled"; then
		# Flag to sync current config w/ the apps being restored
	  sickbeardAction="Enable"
	fi
	
	if [ "$transmissionAction" == "Restore" ]; then
		# Stop the service
		transmission__stop

		# Restore Transmission appdata from backup
		echo "* Restoring Transmission Data"
		rm -rf "$transmissionData"
		sudo su -c -u $osUser \
			"tar xf $file --strip-components 1 -C $tretflixPath/appdata/ appdata/transmission-daemon"	
			
		transmissionAction="Enable"
	elif echo "$(transmission__get_status)" | grep -q "^Enabled"; then
	  # Flag to sync current config w/ the apps being restored
	  transmissionAction="Enable"
	fi
	

	# CouchPotato Section
	if [ "$couchpotatoAction" == "Enable" ]; then
		if ! echo "$(couchpotato__get_status)" | grep -q "^Enabled"; then
			# Install the app if not already installed
			if [ "$(couchpotato__get_status)" == "Not Installed" ]; then
				couchpotato__install
			fi
			
			# Enable the app
			couchpotato__enable
		else
			if couchpotato__version_check; then
				# Upgrade the app if a newer version is available
				couchpotato__upgrade
			fi
		fi

    if [ "$sabnzbdAction" == "Enable" ]; then
			sabnzbdPort=$(sabnzbd__get_port)
			sabnzbdAPIkey=$(sabnzbd__get_apikey)
      couchpotato__config_sabnzbd "$sabnzbdPort" "$sabnzbdAPIkey"
    fi
    if [ "$plexserverAction" == "Enable" ]; then
      couchpotato__config_plexserver
    fi
    if [ "$proxyAction" == "Enable" ]; then
      couchpotato__config_proxy
    fi

		# Start the app
		couchpotato__start
	fi


	# Headphones Section
	if [ "$headphonesAction" == "Enable" ]; then
		if ! echo "$(headphones__get_status)" | grep -q "^Enabled"; then
			# Install the app if not already installed
			if [ "$(headphones__get_status)" == "Not Installed" ]; then
				headphones__install
			fi
			
			# Enable the app
			headphones__enable
		else
			if headphones__version_check; then
				# Upgrade the app if a newer version is available
				headphones__upgrade
			fi
		fi

    if [ "$sabnzbdAction" == "Enable" ]; then
			sabnzbdPort=$(sabnzbd__get_port)
			sabnzbdAPIkey=$(sabnzbd__get_apikey)
			sabnzbdUsername=$(sabnzbd__get_username)
			sabnzbdPassword=$(sabnzbd__get_password)
      headphones__config_sabnzbd "$sabnzbdPort" "$sabnzbdAPIkey" "$sabnzbdUser" "$sabnzbdPass"
    fi
    if [ "$proxyAction" == "Enable" ]; then
      headphones__config_proxy
    fi

		# Start the app
		headphones__start
	fi


	# NzbDrone Section
	if [ "$nzbdroneAction" == "Enable" ]; then
		if ! echo "$(nzbdrone__get_status)" | grep -q "^Enabled"; then
			# Install the app if not already installed
			if [ "$(nzbdrone__get_status)" == "Not Installed" ]; then
				nzbdrone__install
			fi
			
			# Enable the app
			nzbdrone__enable
		else
			if nzbdrone__version_check; then
				# Upgrade the app if a newer version is available
				nzbdrone__upgrade
			fi
		fi

    if [ "$sabnzbdAction" == "Enable" ]; then
			sabnzbdPort=$(sabnzbd__get_port)
			sabnzbdAPIkey=$(sabnzbd__get_apikey)
			sabnzbdUsername=$(sabnzbd__get_username)
			sabnzbdPassword=$(sabnzbd__get_password)
      nzbdrone__config_sabnzbd "$sabnzbdPort" "$sabnzbdAPIkey" "$sabnzbdUser" "$sabnzbdPass"
    fi
    if [ "$plexserverAction" == "Enable" ]; then
      nzbdrone__config_plexserver
    fi
    if [ "$proxyAction" == "Enable" ]; then
      nzbdrone__config_proxy
    fi

		# Start the app
		nzbdrone__start
	fi
	

	# Plex Media Server Section
	if [ "$plexserverAction" == "Enable" ]; then
		if ! echo "$(plexserver__get_status)" | grep -q "^Enabled"; then
			# Install the app if not already installed
			if [ "$(plexserver__get_status)" == "Not Installed" ]; then
				plexserver__install
			fi
			
			# Enable the app
			plexserver__enable
		else
			if plexserver__version_check; then
				# Upgrade the app if a newer version is available
				plexserver__upgrade
			fi
		fi

		# Start the app
		plexserver__start
	fi


	# SABnzbd+ Section
	if [ "$sabnzbdAction" == "Enable" ]; then
		if ! echo "$(sabnzbd__get_status)" | grep -q "^Enabled"; then
			# Install the app if not already installed
			if [ "$(sabnzbd__get_status)" == "Not Installed" ]; then
				sabnzbd__install
			fi

			# Enable the app
			sabnzbd__enable
		else
      if sabnzbd__version_check; then
				# Upgrade the app if a newer version is available
				sabnzbd__upgrade
		  fi
		fi
		
    if [ "$couchpotatoAction" == "Enable" ]; then
      sabnzbd__config_couchpotato
    fi
    if [ "$headphonesAction" == "Enable" ]; then
      sabnzbd__config_headphones
    fi
    if [ "$nzbdroneAction" == "Enable" ]; then
      sabnzbd__config_nzbdrone
    fi
    if [ "$sickbeardAction" == "Enable" ]; then
      sabnzbd__config_sickbeard
    fi

		# Start the app
		sabnzbd__start
	fi
	
	
	# Sick Beard Section
	if [ "$sickbeardAction" == "Enable" ]; then
		if ! echo "$(sickbeard__get_status)" | grep -q "^Enabled"; then
			# Install the app if not already installed
			if [ "$(sickbeard__get_status)" == "Not Installed" ]; then
				sickbeard__install
			fi
			
			# Enable the app
			sickbeard__enable
		else
			if sickbeard__version_check; then
				# Upgrade the app if a newer version is available
				sickbeard__upgrade
			fi
		fi

    if [ "$sabnzbdAction" == "Enable" ]; then
			sabnzbdPort=$(sabnzbd__get_port)
			sabnzbdAPIkey=$(sabnzbd__get_apikey)
			sabnzbdUsername=$(sabnzbd__get_username)
			sabnzbdPassword=$(sabnzbd__get_password)
      sickbeard__config_sabnzbd "$sabnzbdPort" "$sabnzbdAPIkey" "$sabnzbdUser" "$sabnzbdPass"
    fi
    if [ "$plexserverAction" == "Enable" ]; then
      sickbeard__config_plexserver
    fi
    if [ "$proxyAction" == "Enable" ]; then
      sickbeard__config_proxy
    fi

		# Start the app
		sickbeard__start
	fi
	
	
	# Transmission Section
	if [ "$transmissionAction" == "Enable" ]; then
		if ! echo "$(transmission__get_status)" | grep -q "^Enabled"; then
			# Install the app if not already installed
			if [ "$(transmission__get_status)" == "Not Installed" ]; then
				transmission__install
			fi
			
			# Enable the app
			transmission__enable
		else
			if transmission__version_check; then
				# Upgrade the app if a newer version is available
				transmission__stop
				transmission__upgrade
			fi
		fi

		# Start the app
		transmission__start
	fi

	
  # Reverse Proxy Section
	if [ "$proxyAction" == "Enable" ]; then
		if ! echo "$(proxy__get_status)" | grep -q "^Enabled"; then
			# Install the service if not already installed
			if [ "$(proxy__get_status)" == "Not Installed" ]; then
				proxy__install
			fi

			# Enable the service
			proxy__enable
		fi

    if [ "$couchpotatoAction" == "Enable" ]; then
      couchpotatoPort=$(headphones__get_port)
      proxy__config_couchpotato "$couchpotatoPort"
    fi
    if [ "$headphonesAction" == "Enable" ]; then
      headphonesPort=$(headphones__get_port)
      proxy__config_headphones "$headphonesPort"
    fi
    if [ "$nzbdroneAction" == "Enable" ]; then
      nzbdronePort=$(headphones__get_port)
      proxy__config_nzbdrone "$nzbdronePort"
    fi
    if [ "$sabnzbdAction" == "Enable" ]; then
      sabnzbdPort=$(headphones__get_port)
      proxy__config_sabnzbd "$sabnzbdPort"
    fi
    if [ "$sickbeardAction" == "Enable" ]; then
      sickbeardPort=$(headphones__get_port)
      proxy__config_sickbeard "$sickbeardPort"
    fi
    if [ "$transmissionAction" == "Enable" ]; then
      transmissionPort=$(headphones__get_port)
      proxy__config_transmission "$transmissionPort"
    fi
		
		# Start the service
		proxy__start
	else
		# Stop and disable the service if not already disabled
		if echo "$(proxy__get_status)" | grep -q "^Enabled"; then
			proxy__disable
		fi
	fi


	echo    
	while true; do
		read -p "Do you want to see a config summary? (y/n): " input
		case "$input" in
			[yY] | [yY][Ee][Ss] )
				clear
				echo "  __                  __    _____ __   __        "
				echo "_/  |________   _____/  |__/ ____\  | |__|__  ___"
				echo "\   __\_  __ \_/ __ \   __\   __\|  | |  \  \/  /"
				echo " |  |  |  | \/\  ___/|  |  |  |  |  |_|  |>    < "
				echo " |__|  |__|    \_____/__|  |__|  |____/__/__/\__\\"
				echo
				echo    
				apps__show_config "--all"
				break;;
			[nN] | [n|N][O|o] )
			  echo
				break;;
			* )
				echo "!! ERROR: Invalid entry."
				echo
		esac
	done

	timestamp=$(date "+%Y%m%d%H%M%S")
	sudo su -c -u $osUser \
		"echo restore-appdata_$timestamp >> $restoreFlag"
}
