# avoid double inclusion
if test "${network__imported+defined}" == "defined"; then
  return 0
fi
network__imported=1

function network__root() {
  if test "${CLI_ARGS[2]+isset}"; then
    case "${CLI_ARGS[1]} ${CLI_ARGS[2]}" in
      'add ip')
        network__add_ip
        ;;
      'del ip')
        network__del_ip
        ;;
      'set dns')
        network__set_dns
        ;;
      'set domain')
        network__set_domain
        ;;
      'show config')
        network__show_config
        ;;
      *)
        help__network
    esac	
  else
    help__network
  fi
}

function network__add_ip() {
  if [ "${#CLI_ARGS[@]}" -eq 6 ]; then
    ifaceIP="${CLI_ARGS[3]}"
    ifaceNetmask="${CLI_ARGS[4]}"
    ifaceGateway="${CLI_ARGS[5]}"
    ifaceBroadcast=$(ipcalc $ifaceIP $ifaceNetmask | egrep "^Broadcast:" | awk '{ print $2}')
    ifaceNetwork=$(ipcalc $ifaceIP $ifaceNetmask | egrep "^Network:" | awk '{ print $2}' | sed 's/\/.*$//g')
  else
    help__network
    return 1
  fi

  tools__host_ping $ifaceIP > /dev/null
  if [ $? -eq 0 ]; then
    echo "IP address already in use on the network"
    return 1
  fi

  ifaceCount=$(cat /etc/network/interfaces | egrep "auto eth[0-9]:[0-9]" | sort | awk -F ":" '{ print $2 }' | wc -l)
  if [ "$ifaceCount" -eq 0 ]; then
    ifaceLabel="eth0:1"
  else
    ifaceGap=$(cat /etc/network/interfaces | egrep "auto eth[0-9]:[0-9]" | sort | awk -F ":" '{ print $2 }' | awk '($1!=p+1){print p+1} {p=$1}')
    ifaceLast=$(cat /etc/network/interfaces | egrep "auto eth[0-9]:[0-9]" | sort | awk -F ":" '{ print $2 }' | tail -1)
    if [ "$ifaceGap" ]; then
      ifaceLabel="eth0:$ifaceGap"
    elif [ "$ifaceLast" ]; then
      ifaceLast=$(( $ifaceLast + 1 ))
      ifaceLabel="eth0:$ifaceLast"
    else
      echo "Unable to determine existing virtual interfaces"
      return 1
    fi
  fi

  # Add interface to network config
  echo -e "\n" >> /etc/network/interfaces
  echo "# $ifaceLabel interface section start" >> /etc/network/interfaces
  echo "# Added by tretflix, do not modify!" >> /etc/network/interfaces
  echo "auto $ifaceLabel" >> /etc/network/interfaces
  echo "iface $ifaceLabel inet static" >> /etc/network/interfaces
  echo -e "\taddress $ifaceIP" >> /etc/network/interfaces
  echo -e "\tnetmask $ifaceNetmask" >> /etc/network/interfaces
  echo -e "\tnetwork $ifaceNetwork" >> /etc/network/interfaces
  echo -e "\tbroadcast $ifaceBroadcast" >> /etc/network/interfaces
  echo -e "\tgateway $ifaceGateway" >> /etc/network/interfaces
  echo "# $ifaceLabel interface section end" >> /etc/network/interfaces
  echo -e "\n" >> /etc/network/interfaces

  # Clean up network config file, remove double (or more) blank lines
  sed -i '/^$/N;/^\n$/D' /etc/network/interfaces

  service networking restart > /dev/null 2>&1
  ifconfig $ifaceLabel up
}

function network__del_ip() {
  if [ "${#CLI_ARGS[@]}" -eq 4 ]; then
    ifaceIP="${CLI_ARGS[3]}"
  else
    help__network
  fi

  ifaceLabel=$(ifconfig | awk '/'$ifaceIP'/ {print $1}' RS="\n\n")
  if [ ! "$ifaceLabel" ]; then
    echo "The IP address specified is not currently configured"
    return 1
  fi

  if [ "$ifaceLabel" == "eth0" ]; then
    echo "The default interface (eth0) cannot be removed"
    return 1
  fi

  if [ "$ifaceLabel" == "lo" ]; then
    echo "The loopback interface (lo) cannot be removed"
    return 1
  fi

  if ! cat /etc/network/interfaces | grep -q "^# $ifaceLabel interface section start"; then
    echo "Only interfaces added by tretflix can be removed using this command"
  fi

  ifconfig $ifaceLabel down
  sed -i -n '1h;1!H;${;g;s/# '$ifaceLabel' interface section start.*# '$ifaceLabel' interface section end//g;p;}' \
    /etc/network/interfaces

  sed -i '/^$/N;/^\n$/D' /etc/network/interfaces

  service networking restart > /dev/null 2>&1
}

function network__set_dns() {
  if [ "${#CLI_ARGS[@]}" -ge 4 ]; then
    echo "Debug: network__set_dns code goes here!"
  else
    help__network
  fi
}

function network__set_domain() {
  if [ "${#CLI_ARGS[@]}" -eq 4 ]; then
    echo "Debug: network__set_domain code goes here!"
  else
    help__network
  fi
}

function network__show_config() {
  if [ "${#CLI_ARGS[@]}" -eq 3 ]; then
    ifconfig eth0
  else
    help__network
  fi
}
