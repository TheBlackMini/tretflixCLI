# avoid double inclusion
if test "${scheduler__imported+defined}" == "defined"; then
  return 0
fi
scheduler__imported=1

function scheduler__help() {
  echo "Usage: tretflix scheduler [COMMAND] [OPTION]"
  echo
  echo "COMMANDS:"
  echo "  tretflix scheduler app upgrades [OPTION]"
  echo "  tretflix scheduler tmp cleanup [OPTION]"
  echo "  tretflix scheduler show config"
  echo
  echo "OPTIONS:"
  echo "  -e, --enable"
  echo "  -d, --disable"
  echo
  echo "NOTES:"
  echo "  Enable 'app upgrades' to check for and upgrade all apps"
  echo "  daily at 1am. Enable 'tmp cleanup' to automatically purge"
  echo "  abandoned tmp files/dirs daily at 2am."
  echo
  exit 1
}

function scheduler__command_handler() {
  if test "${CLI_ARGS[2]+isset}"; then
    case "${CLI_ARGS[1]} ${CLI_ARGS[2]}" in
      'app upgrades')
        if [ "${#CLI_ARGS[@]}" -eq 4 ]; then
          case "${CLI_ARGS[3]}" in
            '-e' | '--enable')
              scheduler__app_upgrades "enable"
              ;;
            '-d' | '--disable')
              scheduler__app_upgrades "disable"
              ;;
            *)
              scheduler__help
          esac
        else
          scheduler__help
        fi
        ;;
      'tmp cleanup')
        if [ "${#CLI_ARGS[@]}" -eq 4 ]; then
          case "${CLI_ARGS[3]}" in
            '-e' | '--enable')
              scheduler__tmp_cleanup "enable"
              ;;
            '-d' | '--disable')
              scheduler__tmp_cleanup "disable"
              ;;
            *)
              scheduler__help
          esac
        else
          scheduler__help
        fi
        ;;
      'show config')
        if [ "${#CLI_ARGS[@]}" -eq 3 ]; then
          scheduler__show_config
        else
          scheduler__help
        fi
        ;;        
      *)
        scheduler__help
    esac
  else
    scheduler__help
  fi
}

function scheduler__app_upgrades() {
  option="$1"
  tmpfile="/tmp/cront.tmp"
  
  # Output the current crontab to a tmp file
  sudo su -c -u $osUser \
    "crontab -l > $tmpfile 2> /dev/null"
  
  # If the user option is "enable" and the cronjob isn't present, add it
  if [ "$option" == "enable" ]; then
    if grep -q "service -a upgrade" $tmpfile; then
      echo "The job is already scheduled"
      echo
      exit 1
    else
      echo "* Adding the job to crontab"

      sudo su -c -u $osUser \
        "echo '0 1 * * * /opt/tretflix/.sys/cli/./tretflixCLI.sh service -a upgrade' >> $tmpfile"
        
      sudo su -c -u $osUser \
        "crontab $tmpfile"
      
      echo
      echo scheduler__show_config
    fi

  # If the user option is "disable" and the cronjob is present, remove it
  elif [ "$option" == "disable" ]; then
    if ! grep -q "service -a upgrade" $tmpfile; then
      echo "The job is already disabled"
      echo
      exit 1
    else
      sed -i '/tretflixCLI.sh service -a upgrade/d' $tmpfile
      
      sudo su -c -u $osUser \
        "crontab $tmpfile"
        
      echo "The job has been disabled"
    fi

  # If option is neither, output an error
  else
    echo "Invalid option"
    echo
    exit 1
  fi
  
  rm -f $tmpfile > /dev/null 2>&1
}

function scheduler__tmp_cleanup() {
  option="$1"
  tmpfile="/tmp/cront.tmp"
  
  # Output the current crontab to a tmp file
  sudo su -c -u $osUser \
    "crontab -l > $tmpfile 2> /dev/null"
  
  # If the user option is "enable" and the cronjob isn't present, add it
  if [ "$option" == "enable" ]; then
    if grep -q "storage tmp cleanup" $tmpfile; then
      echo "The job is already scheduled"
      echo
      exit 1
    else
      echo "* Adding the job to crontab"

      sudo su -c -u $osUser \
        "echo '0 2 * * * /opt/tretflix/.sys/cli/./tretflixCLI.sh storage tmp cleanup' >> $tmpfile"
        
      sudo su -c -u $osUser \
        "crontab $tmpfile"
      
      echo
      echo scheduler__show_config
    fi

  # If the user option is "disable" and the cronjob is present, remove it
  elif [ "$option" == "disable" ]; then
    if ! grep -q "storage tmp cleanup" $tmpfile; then
      echo "The job is already disabled"
      echo
      exit 1
    else
      sed -i '/tretflixCLI.sh storage tmp cleanup/d' $tmpfile
      
      sudo su -c -u $osUser \
        "crontab $tmpfile"
        
      echo "The job has been disabled"
    fi

  # If option is neither, output an error
  else
    echo "Invalid option"
    echo
    exit 1
  fi
  
  rm -f $tmpfile > /dev/null 2>&1
}

function scheduler__show_config() {
  if sudo su -c -u $osUser "crontab -l" | grep -q "service -a upgrade"; then
    echo "app upgrades: enabled, scheduled for 1am daily"
  else
    echo "app upgrades: disabled"
  fi
  
  if sudo su -c -u $osUser "crontab -l" | grep -q "storage tmp cleanup"; then
    echo "tmp cleanup: enabled, scheduled for 2am daily"
  else
    echo "tmp cleanup: disabled"
  fi  
}

