# avoid double inclusion
if test "${config__imported+defined}" == "defined"; then
  return 0
fi
config__imported=1

function config__help() {
  echo "Usage: tretflix config [COMMAND] [OPTION]"
  echo
  echo "COMMANDS:"
  echo "  tretflix config wizard"
  echo "  tretflix config backup appdata"
  echo "  tretflix config restore appdata [OPTION] ..."
  echo
  echo "OPTIONS:"
  echo "  -l, --list"
  echo "  -f, --file [FILE]"
  echo
  echo "NOTES:" 
  echo "  Backups will be saved in /opt/tretflix. When restoring a" 
  echo "  backup, provide the backup filename or the full path to"
  echo "  the backup file if it's not in /opt/tretflix."
  echo
  exit 1
}

function config__command_handler() {
  if test "${CLI_ARGS[2]+isset}"; then
    case "${CLI_ARGS[1]} ${CLI_ARGS[2]}" in
      'backup appdata')
        config__backup_appdata
        ;;
      'restore appdata')
        config__restore_appdata
        ;;
      *)
        config__help
    esac    
  elif test "${CLI_ARGS[1]+isset}"; then
    case "${CLI_ARGS[1]}" in
      wizard)
        config__wizard
        ;;
      *)
        config__help
    esac
  else
    config__help
  fi
}

function config__wizard() {
  if [ "${#CLI_ARGS[@]}" -eq 2 ]; then
    clear
    echo "  __                  __    _____ __   __        "
    echo "_/  |________   _____/  |__/ ____\  | |__|__  ___"
    echo "\   __\_  __ \_/ __ \   __\   __\|  | |  \  \/  /"
    echo " |  |  |  | \/\  ___/|  |  |  |  |  |_|  |>    < "
    echo " |__|  |__|    \_____/__|  |__|  |____/__/__/\__\\"
    echo
    echo
    while true; do
      read -p "Do you want to use CouchPotato? (y/n): " input
      case "$input" in
        [yY] | [yY][Ee][Ss] )
          couchpotatoStatus="Enabled"
          read -p "Enter a username for the CouchPotato Web UI [Default: admin]: " input
          if [[ -z "${input}" ]]; then
            couchpotatoUser="admin"
          else
            couchpotatoUser="$input"
          fi
          read -p "Enter a password for the CouchPotato Web UI [Default: admin]: " input
          if [[ -z "${input}" ]]; then
            couchpotatoPass="admin"
          else
            couchpotatoPass="$input"
          fi
          read -p "Enter a port number for the CouchPotato Web UI [Default: 5050]: " input
          if [[ -z "${input}" ]]; then
            couchpotatoPort="5050"
          else
            couchpotatoPort="$input"
          fi
          couchpotatoAPIkey="$(tools__gen_apikey)"
          echo "New CouchPotato API key randomly generated for increased security."
          break;;
        [nN] | [n|N][O|o] )
          couchpotatoStatus="Disabled"
          break;;
        * )
          echo "!! ERROR: Invalid entry."
          echo
      esac      
    done

    echo
    while true; do
      read -p "Do you want to use Headphones? (y/n): " input
      case "$input" in
        [yY] | [yY][Ee][Ss] )
          headphonesStatus="Enabled"
          read -p "Enter a username for the Headphones Web UI [Default: admin]: " input
          if [[ -z "${input}" ]]; then
            headphonesUser="admin"
          else
            headphonesUser="$input"
          fi
          read -p "Enter a password for the Headphones Web UI [Default: admin]: " input
          if [[ -z "${input}" ]]; then
            headphonesPass="admin"
          else
            headphonesPass="$input"
          fi
          read -p "Enter a port number for the Headphones Web UI [Default: 8181]: " input
          if [[ -z "${input}" ]]; then
            headphonesPort="8181"
          else
            headphonesPort="$input"
          fi
          headphonesAPIkey="$(tools__gen_apikey)"
          echo "New Headphones API key randomly generated for increased security."
          break;;
        [nN] | [n|N][O|o] )
          headphonesStatus="Disabled"
          break;;
        * )
          echo "!! ERROR: Invalid entry."
          echo
      esac      
    done  
    
    echo
    while true; do
      read -p "Do you want to use NzbDrone? (y/n): " input
      case "$input" in
        [yY] | [yY][Ee][Ss] )
          nzbdroneStatus="Enabled"
          read -p "Enter a username for the NzbDrone Web UI [Default: admin]: " input
          if [[ -z "${input}" ]]; then
            nzbdroneUser="admin"
          else
            nzbdroneUser="$input"
          fi
          read -p "Enter a password for the NzbDrone Web UI [Default: admin]: " input
          if [[ -z "${input}" ]]; then
            nzbdronePass="admin"
          else
            nzbdronePass="$input"
          fi
          read -p "Enter a port number for the NzbDrone Web UI [Default: 8989]: " input
          if [[ -z "${input}" ]]; then
            nzbdronePort="8989"
          else
            nzbdronePort="$input"
          fi
          nzbdroneAPIkey="$(tools__gen_apikey)"
          echo "New NzbDrone API key randomly generated for increased security."
          break;;
        [nN] | [n|N][O|o] )
          nzbdroneStatus="Disabled"
          break;;
        * )
          echo "!! ERROR: Invalid entry."
          echo
      esac      
    done   
      
    echo
    while true; do
      read -p "Do you want to use Plex Media Server? (y/n): " input
      case "$input" in
        [yY] | [yY][Ee][Ss] )
          plexserverStatus="Enabled"
          plexserverPort="32400"
          break;;
        [nN] | [n|N][O|o] )
          plexserverStatus="Disabled"
          break;;
        * )
          echo "!! ERROR: Invalid entry."
          echo
      esac      
    done  

    echo
    while true; do
      read -p "Do you want to use SABnzbd+? (y/n): " input
      case "$input" in
        [yY] | [yY][Ee][Ss] )
          sabnzbdStatus="Enabled"
          read -p "Enter a username for the SABnbzd+ Web UI [Default: admin]: " input
          if [[ -z "${input}" ]]; then
            sabnzbdUser="admin"
          else
            sabnzbdUser="$input"
          fi
          read -p "Enter a password for the SABnbzd+ Web UI [Default: admin]: " input
          if [[ -z "${input}" ]]; then
            sabnzbdPass="admin"
          else
            sabnzbdPass="$input"
          fi
          read -p "Enter a port number for the SABnbzd+ Web UI [Default: 8080]: " input
          if [[ -z "${input}" ]]; then
            sabnzbdPort="8080"
          else
            sabnzbdPort="$input"
          fi
          sabnzbdAPIkey="$(tools__gen_apikey)"
          echo "New SABnzbd+ API key randomly generated for increased security."
          break;;
        [nN] | [n|N][O|o] )
          sabnzbdStatus="Disabled"
          break;;
        * )
          echo "!! ERROR: Invalid entry."
          echo
      esac      
    done

    echo
    while true; do
      read -p "Do you want to use Sick Beard? (y/n): " input
      case "$input" in
        [yY] | [yY][Ee][Ss] )
          sickbeardStatus="Enabled"
          read -p "Enter a username for the Sick Beard Web UI [Default: admin]: " input
          if [[ -z "${input}" ]]; then
            sickbeardUser="admin"
          else
            sickbeardUser="$input"
          fi
          read -p "Enter a password for the Sick Beard Web UI [Default: admin]: " input
          if [[ -z "${input}" ]]; then
            sickbeardPass="admin"
          else
            sickbeardPass="$input"
          fi
          read -p "Enter a port number for the Sick Beard Web UI [Default: 8081]: " input
          if [[ -z "${input}" ]]; then
            sickbeardPort="8081"
          else
            sickbeardPort="$input"
          fi
          sickbeardAPIkey="$(tools__gen_apikey)"
          echo "New Sick Beard API key randomly generated for increased security."
          break;;
        [nN] | [n|N][O|o] )
          sickbeardStatus="Disabled"
          break;;
        * )
          echo "!! ERROR: Invalid entry."
          echo
      esac      
    done

    echo
    while true; do
      read -p "Do you want to use Transmission? (y/n): " input
      case "$input" in
        [yY] | [yY][Ee][Ss] )
          transmissionStatus="Enabled"
          read -p "Enter a username for the Transmission Web UI [Default: admin]: " input
          if [[ -z "${input}" ]]; then
            transmissionUser="admin"
          else
            transmissionUser="$input"
          fi
          read -p "Enter a password for the Transmission Web UI [Default: admin]: " input
          if [[ -z "${input}" ]]; then
            transmissionPass="admin"
          else
            transmissionPass="$input"
          fi
          read -p "Enter a port number for the Transmission Web UI [Default: 9091]: " input
          if [[ -z "${input}" ]]; then
            transmissionPort="9091"
          else
            transmissionPort="$input"
          fi
          break;;
        [nN] | [n|N][O|o] )
          transmissionStatus="Disabled"
          break;;
        * )
          echo "!! ERROR: Invalid entry."
          echo
      esac      
    done
    
		echo	
    while true; do
      read -p "Apply these changes? (y/n): " input
      case "$input" in
        [yY] | [yY][Ee][Ss] )
          break;;
        [nN] | [n|N][O|o] )
          exit 1;;
        * )
          echo "!! ERROR: Invalid entry."
          echo
      esac
    done

    clear
    echo "  __                  __    _____ __   __        "
    echo "_/  |________   _____/  |__/ ____\  | |__|__  ___"
    echo "\   __\_  __ \_/ __ \   __\   __\|  | |  \  \/  /"
    echo " |  |  |  | \/\  ___/|  |  |  |  |  |_|  |>    < "
    echo " |__|  |__|    \_____/__|  |__|  |____/__/__/\__\\"
    echo
    echo
    # Upgrade all apps, prevents newer appdata w/ old app builds issue
    allservices__upgrade
    echo
    echo "Applying configuration changes..."
    echo

    echo "* Configuring CouchPotato"
    couchpotato__stop
    # Prevents config getting out of sync with SABnzbd+ if enabled later
    if [ "$sabnzbdStatus" == "Enabled" ]; then
      couchpotato__set_sabnzbd_port "$sabnzbdPort"
      couchpotato__set_sabnzbd_apikey "$sabnzbdAPIkey"     
    fi
    if [ "$couchpotatoStatus" == "Enabled" ]; then
      couchpotato__set_username "$couchpotatoUser"
      couchpotato__set_password "$couchpotatoPass"
      couchpotato__set_port "$couchpotatoPort"
      couchpotato__set_apikey "$couchpotatoAPIkey"
      couchpotato__enable
    else
      couchpotato__disable
    fi
    
    echo "* Configuring Headphones"
    headphones__stop
    # Prevents config getting out of sync with SABnzbd+ if enabled later
    if [ "$sabnzbdStatus" == "Enabled" ]; then
      headphones__set_sabnzbd_username "$sabnzbdUser"
      headphones__set_sabnzbd_password "$sabnzbdPass"
      headphones__set_sabnzbd_port "$sabnzbdPort"
      headphones__set_sabnzbd_apikey "$sabnzbdAPIkey"      
    fi    
    if [ "$headphonesStatus" == "Enabled" ]; then
      headphones__set_username "$headphonesUser"
      headphones__set_password "$headphonesPass"
      headphones__set_port "$headphonesPort"
      headphones__set_apikey "$headphonesAPIkey"
      headphones__enable
    else
      headphones__disable
    fi

    echo "* Configuring Plex Media Server"
		# No need to stop Plex Media Server
    if [ "$plexserverStatus" == "Enabled" ]; then
      plexserver__enable
    else
      plexserver__disable
    fi
    
    echo "* Configuring SABnzbd+"
    sabnzbd__stop
    if [ "$sabnzbdStatus" == "Enabled" ]; then
      sabnzbd__set_username "$sabnzbdUser"
      sabnzbd__set_password "$sabnzbdPass"
      sabnzbd__set_port "$sabnzbdPort"
      sabnzbd__set_apikey "$sabnzbdAPIkey"
      sabnzbd__enable
    else
      sabnzbd__disable
    fi

    echo "* Configuring Sick Beard"
    sickbeard__stop
    # Prevents config getting out of sync with SABnzbd+ if enabled later
    if [ "$sabnzbdStatus" == "Enabled" ]; then
      sickbeard__set_sabnzbd_username "$sabnzbdUser"
      sickbeard__set_sabnzbd_password "$sabnzbdPass"
      sickbeard__set_sabnzbd_port "$sabnzbdPort"
      sickbeard__set_sabnzbd_apikey "$sabnzbdAPIkey"      
    fi
    if [ "$sickbeardStatus" == "Enabled" ]; then
      sickbeard__set_username "$sickbearduser"
      sickbeard__set_password "$sickbeardPass"
      sickbeard__set_port "$sickbeardPort"
      sickbeard__set_apikey "$sickbeardAPIkey"
      sickbeard__enable
    else
      sickbeard__disable
    fi

    echo "* Configuring Transmission"
    transmission__stop
    if [ "$transmissionStatus" == "Enabled" ]; then
      transmission__set_username "$transmissionUser"
      transmission__set_password "$transmissionPass"
      transmission__set_port "$transmissionPort"
      transmission__enable
    else
      transmission__disable
    fi
    
		echo	
    while true; do
      read -p "Do you want to see a config summary? (y/n): " input
      case "$input" in
        [yY] | [yY][Ee][Ss] )
          clear
          echo "  __                  __    _____ __   __        "
          echo "_/  |________   _____/  |__/ ____\  | |__|__  ___"
          echo "\   __\_  __ \_/ __ \   __\   __\|  | |  \  \/  /"
          echo " |  |  |  | \/\  ___/|  |  |  |  |  |_|  |>    < "
          echo " |__|  |__|    \_____/__|  |__|  |____/__/__/\__\\"
          echo
          echo    
          allservices__show_config
          break;;
        [nN] | [n|N][O|o] )
          break;;
        * )
          echo "!! ERROR: Invalid entry."
          echo
      esac
    done
    
    timestamp=$(date "+%Y%m%d%H%M%S")
    sudo su -c -u $osUser \
      "echo config-wizard_$timestamp >> $configFlag"
    
  else
    config__help
  fi
}

function config__backup_appdata() {
  if [ "${#CLI_ARGS[@]}" -eq 3 ]; then
    timestamp=$(date "+%Y%m%d%H%M%S")
  
    echo "Stopping Services..."
    allservices__stop
    
    echo "Creating $tretflixPath/backup-$timestamp.tar..."
    sudo su -c -u $osUser \
      "cd $tretflixPath && tar cf backup-$timestamp.tar appdata/"
    
    echo "Starting Services..."
    allservices__start

    echo "Done."
  else
    config__help
  fi
}

function config__restore_appdata() {
  if [ "${#CLI_ARGS[@]}" -eq 4 ]; then
    case "${CLI_ARGS[3]}" in
      '-l' | '--list')
        ls "$tretflixPath" | grep --color="none" "backup-.*tar" 2> /dev/null
        ;;
      *)
        config__help
    esac
  elif [ "${#CLI_ARGS[@]}" -eq 5 ]; then
    case "${CLI_ARGS[3]}" in
      '-f' | '--file')
        if [ "$(tools__path_istype ${CLI_ARGS[4]})" == "File" ]; then
          file="$(realpath ${CLI_ARGS[4]})"
        elif [ "$(tools__path_istype $tretflixPath/${CLI_ARGS[4]})" == "File" ]; then
          file="$(realpath $tretflixPath/${CLI_ARGS[4]})"
        else
          echo "The specified file cannot be found"
          echo
          exit 1
        fi
        
        echo "Stopping Services..."
        allservices__stop

        # Upgrade all apps, prevents newer appdata w/ old app builds issue
        echo "Upgrading Services..."
        allservices__upgrade
        
        echo "Archiving current Appdata..."
        timestamp=$(date "+%Y%m%d%H%M%S")
        sudo su -c -u $osUser \
          "cd $tretflixPath && tar cf archived-$timestamp.tar appdata/"
    
        echo "Unpacking $file..."
        rm -rf /opt/tretflix/appdata/
        sudo su -c -u $osUser \
          "tar -xf $file -C $tretflixPath/"
    
        echo "Starting Services..."
        if [ "$(tools__path_istype $couchpotatoData/.enabled)" == "File" ]; then
          couchpotato__enable
        elif [ "$(tools__path_istype $couchpotatoData/.disabled)" == "File" ]; then
          couchpotato__disable
        fi
        if [ "$(tools__path_istype $headphonesData/.enabled)" == "File" ]; then
          headphones__enable
        elif [ "$(tools__path_istype $headphonesData/.disabled)" == "File" ]; then
          headphones__disable
        fi
        if [ "$(tools__path_istype $nzbdroneData/.enabled)" == "File" ]; then
          nzbdrone__enable
        elif [ "$(tools__path_istype $nzbdroneData/.disabled)" == "File" ]; then
          nzbdrone__disable
        fi
        if [ "$(tools__path_istype $sabnzbdData/.enabled)" == "File" ]; then
          sabnzbd__enable
        elif [ "$(tools__path_istype $sabnzbdData/.disabled)" == "File" ]; then
          sabnzbd__disable
        fi
        if [ "$(tools__path_istype $sickbeardData/.enabled)" == "File" ]; then
          sickbeard__enable
        elif [ "$(tools__path_istype $sickbeardData/.disabled)" == "File" ]; then
          sickbeard__disable
        fi
        if [ "$(tools__path_istype $transmissionData/.enabled)" == "File" ]; then
          transmission__enable
        elif [ "$(tools__path_istype $transmissionData/.disabled)" == "File" ]; then
          transmission__disable
        fi
        if [ "$(tools__path_istype $plexserverData/.enabled)" == "File" ]; then
          plexserver__enable
        elif [ "$(tools__path_istype $plexserverData/.disabled)" == "File" ]; then
          plexserver__disable
        fi
        echo "Done."

        timestamp=$(date "+%Y%m%d%H%M%S")
        sudo su -c -u $osUser \
          "echo restore-appdata_$timestamp >> $restoreFlag"
        ;;
      *)
        config__help
    esac
  else
    config__help
  fi
}
